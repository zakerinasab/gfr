/*
 * Copyright (C) 2015 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY apic. DO NOT EDIT.
 */

// clang-format off
#ifndef INTERCEPTOR_HEADER
#define INTERCEPTOR_HEADER

#include "gfr_layer.h"

namespace gfr { class CommandBuffer; }
struct WrappedVkCommandBuffer {
  void *dispatch_table;
  VkCommandBuffer wrapped_object;
  gfr::CommandBuffer *custom_data;
};

namespace intercept
{
  class BaseInterceptor
  {
    public:
    virtual const VkInstanceCreateInfo* GetModifiedInstanceCreateInfo(const VkInstanceCreateInfo* pCreateInfo) {
      return pCreateInfo;
    }
    virtual const VkDeviceCreateInfo* GetModifiedDeviceCreateInfo(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo* pCreateInfo) {
      return pCreateInfo;
    }
    virtual void PreDestroyBuffer(VkDevice device, VkBuffer buffer, AllocationCallbacks pAllocator);
    virtual void PostDestroyBuffer(VkDevice device, VkBuffer buffer, AllocationCallbacks pAllocator);
    virtual VkResult PreCreateCommandPool(VkDevice device, VkCommandPoolCreateInfo const* pCreateInfo, AllocationCallbacks pAllocator, VkCommandPool* pCommandPool);
    virtual VkResult PostCreateCommandPool(VkDevice device, VkCommandPoolCreateInfo const* pCreateInfo, AllocationCallbacks pAllocator, VkCommandPool* pCommandPool, VkResult result);
    virtual void PreDestroyCommandPool(VkDevice device, VkCommandPool commandPool, AllocationCallbacks pAllocator);
    virtual void PostDestroyCommandPool(VkDevice device, VkCommandPool commandPool, AllocationCallbacks pAllocator);
    virtual VkResult PreResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags);
    virtual VkResult PostResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags, VkResult result);
    virtual VkResult PreAllocateCommandBuffers(VkDevice device, VkCommandBufferAllocateInfo const* pAllocateInfo, VkCommandBuffer* pCommandBuffers);
    virtual VkResult PostAllocateCommandBuffers(VkDevice device, VkCommandBufferAllocateInfo const* pAllocateInfo, VkCommandBuffer* pCommandBuffers, VkResult result);
    virtual void PreFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, VkCommandBuffer const* pCommandBuffers);
    virtual void PostFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, VkCommandBuffer const* pCommandBuffers);
    virtual VkResult PreBeginCommandBuffer(WrappedVkCommandBuffer* commandBuffer, VkCommandBufferBeginInfo const* pBeginInfo);
    virtual VkResult PostBeginCommandBuffer(WrappedVkCommandBuffer* commandBuffer, VkCommandBufferBeginInfo const* pBeginInfo, VkResult result);
    virtual VkResult PreEndCommandBuffer(WrappedVkCommandBuffer* commandBuffer);
    virtual VkResult PostEndCommandBuffer(WrappedVkCommandBuffer* commandBuffer, VkResult result);
    virtual VkResult PreResetCommandBuffer(WrappedVkCommandBuffer* commandBuffer, VkCommandBufferResetFlags flags);
    virtual VkResult PostResetCommandBuffer(WrappedVkCommandBuffer* commandBuffer, VkCommandBufferResetFlags flags, VkResult result);
    virtual void PreCmdExecuteCommands(WrappedVkCommandBuffer* commandBuffer, uint32_t commandBufferCount, VkCommandBuffer const* pCommandBuffers);
    virtual void PostCmdExecuteCommands(WrappedVkCommandBuffer* commandBuffer, uint32_t commandBufferCount, VkCommandBuffer const* pCommandBuffers);
    virtual void PreCmdCopyBuffer(WrappedVkCommandBuffer* commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, VkBufferCopy const* pRegions);
    virtual void PostCmdCopyBuffer(WrappedVkCommandBuffer* commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, VkBufferCopy const* pRegions);
    virtual void PreCmdCopyImage(WrappedVkCommandBuffer* commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageCopy const* pRegions);
    virtual void PostCmdCopyImage(WrappedVkCommandBuffer* commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageCopy const* pRegions);
    virtual void PreCmdBlitImage(WrappedVkCommandBuffer* commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageBlit const* pRegions, VkFilter filter);
    virtual void PostCmdBlitImage(WrappedVkCommandBuffer* commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageBlit const* pRegions, VkFilter filter);
    virtual void PreCmdCopyBufferToImage(WrappedVkCommandBuffer* commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkBufferImageCopy const* pRegions);
    virtual void PostCmdCopyBufferToImage(WrappedVkCommandBuffer* commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkBufferImageCopy const* pRegions);
    virtual void PreCmdCopyImageToBuffer(WrappedVkCommandBuffer* commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, VkBufferImageCopy const* pRegions);
    virtual void PostCmdCopyImageToBuffer(WrappedVkCommandBuffer* commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, VkBufferImageCopy const* pRegions);
    virtual void PreCmdUpdateBuffer(WrappedVkCommandBuffer* commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, void const* pData);
    virtual void PostCmdUpdateBuffer(WrappedVkCommandBuffer* commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, void const* pData);
    virtual void PreCmdFillBuffer(WrappedVkCommandBuffer* commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data);
    virtual void PostCmdFillBuffer(WrappedVkCommandBuffer* commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data);
    virtual void PreCmdClearColorImage(WrappedVkCommandBuffer* commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue const* pColor, uint32_t rangeCount, VkImageSubresourceRange const* pRanges);
    virtual void PostCmdClearColorImage(WrappedVkCommandBuffer* commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue const* pColor, uint32_t rangeCount, VkImageSubresourceRange const* pRanges);
    virtual void PreCmdClearDepthStencilImage(WrappedVkCommandBuffer* commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue const* pDepthStencil, uint32_t rangeCount, VkImageSubresourceRange const* pRanges);
    virtual void PostCmdClearDepthStencilImage(WrappedVkCommandBuffer* commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue const* pDepthStencil, uint32_t rangeCount, VkImageSubresourceRange const* pRanges);
    virtual void PreCmdClearAttachments(WrappedVkCommandBuffer* commandBuffer, uint32_t attachmentCount, VkClearAttachment const* pAttachments, uint32_t rectCount, VkClearRect const* pRects);
    virtual void PostCmdClearAttachments(WrappedVkCommandBuffer* commandBuffer, uint32_t attachmentCount, VkClearAttachment const* pAttachments, uint32_t rectCount, VkClearRect const* pRects);
    virtual void PreCmdResolveImage(WrappedVkCommandBuffer* commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageResolve const* pRegions);
    virtual void PostCmdResolveImage(WrappedVkCommandBuffer* commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageResolve const* pRegions);
    virtual void PreUpdateDescriptorSets(VkDevice device, uint32_t descriptorWriteCount, VkWriteDescriptorSet const* pDescriptorWrites, uint32_t descriptorCopyCount, VkCopyDescriptorSet const* pDescriptorCopies);
    virtual void PostUpdateDescriptorSets(VkDevice device, uint32_t descriptorWriteCount, VkWriteDescriptorSet const* pDescriptorWrites, uint32_t descriptorCopyCount, VkCopyDescriptorSet const* pDescriptorCopies);
    virtual void PreCmdBindDescriptorSets(WrappedVkCommandBuffer* commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, VkDescriptorSet const* pDescriptorSets, uint32_t dynamicOffsetCount, uint32_t const* pDynamicOffsets);
    virtual void PostCmdBindDescriptorSets(WrappedVkCommandBuffer* commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, VkDescriptorSet const* pDescriptorSets, uint32_t dynamicOffsetCount, uint32_t const* pDynamicOffsets);
    virtual void PreCmdPushConstants(WrappedVkCommandBuffer* commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, void const* pValues);
    virtual void PostCmdPushConstants(WrappedVkCommandBuffer* commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, void const* pValues);
    virtual VkResult PostCreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo const* pCreateInfo, AllocationCallbacks pAllocator, VkDevice* pDevice, VkResult result);
    virtual void PreDestroyDevice(VkDevice device, AllocationCallbacks pAllocator);
    virtual void PostDestroyDevice(VkDevice device, AllocationCallbacks pAllocator);
    virtual VkResult PostDeviceWaitIdle(VkDevice device, VkResult result);
    virtual void PreCmdBindIndexBuffer(WrappedVkCommandBuffer* commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType);
    virtual void PostCmdBindIndexBuffer(WrappedVkCommandBuffer* commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType);
    virtual void PreCmdBindVertexBuffers(WrappedVkCommandBuffer* commandBuffer, uint32_t firstBinding, uint32_t bindingCount, VkBuffer const* pBuffers, VkDeviceSize const* pOffsets);
    virtual void PostCmdBindVertexBuffers(WrappedVkCommandBuffer* commandBuffer, uint32_t firstBinding, uint32_t bindingCount, VkBuffer const* pBuffers, VkDeviceSize const* pOffsets);
    virtual void PreCmdDraw(WrappedVkCommandBuffer* commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);
    virtual void PostCmdDraw(WrappedVkCommandBuffer* commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance);
    virtual void PreCmdDrawIndexed(WrappedVkCommandBuffer* commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance);
    virtual void PostCmdDrawIndexed(WrappedVkCommandBuffer* commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance);
    virtual void PreCmdDrawIndirect(WrappedVkCommandBuffer* commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
    virtual void PostCmdDrawIndirect(WrappedVkCommandBuffer* commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
    virtual void PreCmdDrawIndexedIndirect(WrappedVkCommandBuffer* commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
    virtual void PostCmdDrawIndexedIndirect(WrappedVkCommandBuffer* commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride);
    virtual void PreCmdDispatch(WrappedVkCommandBuffer* commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
    virtual void PostCmdDispatch(WrappedVkCommandBuffer* commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
    virtual void PreCmdDispatchIndirect(WrappedVkCommandBuffer* commandBuffer, VkBuffer buffer, VkDeviceSize offset);
    virtual void PostCmdDispatchIndirect(WrappedVkCommandBuffer* commandBuffer, VkBuffer buffer, VkDeviceSize offset);
    virtual VkResult PreCreateInstance(VkInstanceCreateInfo const* pCreateInfo, AllocationCallbacks pAllocator, VkInstance* pInstance);
    virtual VkResult PostCreateInstance(VkInstanceCreateInfo const* pCreateInfo, AllocationCallbacks pAllocator, VkInstance* pInstance, VkResult result);
    virtual void PreDestroyInstance(VkInstance instance, AllocationCallbacks pAllocator);
    virtual void PostDestroyInstance(VkInstance instance, AllocationCallbacks pAllocator);
    virtual VkResult PreCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, VkGraphicsPipelineCreateInfo const* pCreateInfos, AllocationCallbacks pAllocator, VkPipeline* pPipelines);
    virtual VkResult PostCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, VkGraphicsPipelineCreateInfo const* pCreateInfos, AllocationCallbacks pAllocator, VkPipeline* pPipelines, VkResult result);
    virtual VkResult PreCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, VkComputePipelineCreateInfo const* pCreateInfos, AllocationCallbacks pAllocator, VkPipeline* pPipelines);
    virtual VkResult PostCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, VkComputePipelineCreateInfo const* pCreateInfos, AllocationCallbacks pAllocator, VkPipeline* pPipelines, VkResult result);
    virtual void PreDestroyPipeline(VkDevice device, VkPipeline pipeline, AllocationCallbacks pAllocator);
    virtual void PostDestroyPipeline(VkDevice device, VkPipeline pipeline, AllocationCallbacks pAllocator);
    virtual VkResult PreCreateShaderModule(VkDevice device, VkShaderModuleCreateInfo const* pCreateInfo, AllocationCallbacks pAllocator, VkShaderModule* pShaderModule);
    virtual VkResult PostCreateShaderModule(VkDevice device, VkShaderModuleCreateInfo const* pCreateInfo, AllocationCallbacks pAllocator, VkShaderModule* pShaderModule, VkResult result);
    virtual void PreDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, AllocationCallbacks pAllocator);
    virtual void PostDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, AllocationCallbacks pAllocator);
    virtual void PreCmdBindPipeline(WrappedVkCommandBuffer* commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline);
    virtual void PostCmdBindPipeline(WrappedVkCommandBuffer* commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline);
    virtual void PreCmdSetViewport(WrappedVkCommandBuffer* commandBuffer, uint32_t firstViewport, uint32_t viewportCount, VkViewport const* pViewports);
    virtual void PostCmdSetViewport(WrappedVkCommandBuffer* commandBuffer, uint32_t firstViewport, uint32_t viewportCount, VkViewport const* pViewports);
    virtual void PreCmdSetScissor(WrappedVkCommandBuffer* commandBuffer, uint32_t firstScissor, uint32_t scissorCount, VkRect2D const* pScissors);
    virtual void PostCmdSetScissor(WrappedVkCommandBuffer* commandBuffer, uint32_t firstScissor, uint32_t scissorCount, VkRect2D const* pScissors);
    virtual void PreCmdSetLineWidth(WrappedVkCommandBuffer* commandBuffer, float lineWidth);
    virtual void PostCmdSetLineWidth(WrappedVkCommandBuffer* commandBuffer, float lineWidth);
    virtual void PreCmdSetDepthBias(WrappedVkCommandBuffer* commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);
    virtual void PostCmdSetDepthBias(WrappedVkCommandBuffer* commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);
    virtual void PreCmdSetBlendConstants(WrappedVkCommandBuffer* commandBuffer, float blendConstants[4]);
    virtual void PostCmdSetBlendConstants(WrappedVkCommandBuffer* commandBuffer, float blendConstants[4]);
    virtual void PreCmdSetDepthBounds(WrappedVkCommandBuffer* commandBuffer, float minDepthBounds, float maxDepthBounds);
    virtual void PostCmdSetDepthBounds(WrappedVkCommandBuffer* commandBuffer, float minDepthBounds, float maxDepthBounds);
    virtual void PreCmdSetStencilCompareMask(WrappedVkCommandBuffer* commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask);
    virtual void PostCmdSetStencilCompareMask(WrappedVkCommandBuffer* commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask);
    virtual void PreCmdSetStencilWriteMask(WrappedVkCommandBuffer* commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask);
    virtual void PostCmdSetStencilWriteMask(WrappedVkCommandBuffer* commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask);
    virtual void PreCmdSetStencilReference(WrappedVkCommandBuffer* commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference);
    virtual void PostCmdSetStencilReference(WrappedVkCommandBuffer* commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference);
    virtual VkResult PostGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_val dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags, VkResult result);
    virtual void PreCmdBeginQuery(WrappedVkCommandBuffer* commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags);
    virtual void PostCmdBeginQuery(WrappedVkCommandBuffer* commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags);
    virtual void PreCmdEndQuery(WrappedVkCommandBuffer* commandBuffer, VkQueryPool queryPool, uint32_t query);
    virtual void PostCmdEndQuery(WrappedVkCommandBuffer* commandBuffer, VkQueryPool queryPool, uint32_t query);
    virtual void PreCmdResetQueryPool(WrappedVkCommandBuffer* commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount);
    virtual void PostCmdResetQueryPool(WrappedVkCommandBuffer* commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount);
    virtual void PreCmdWriteTimestamp(WrappedVkCommandBuffer* commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query);
    virtual void PostCmdWriteTimestamp(WrappedVkCommandBuffer* commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query);
    virtual void PreCmdCopyQueryPoolResults(WrappedVkCommandBuffer* commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags);
    virtual void PostCmdCopyQueryPoolResults(WrappedVkCommandBuffer* commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags);
    virtual void PostGetDeviceQueue(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue* pQueue);
    virtual VkResult PreQueueSubmit(VkQueue queue, uint32_t submitCount, VkSubmitInfo const* pSubmits, VkFence fence);
    virtual VkResult PostQueueSubmit(VkQueue queue, uint32_t submitCount, VkSubmitInfo const* pSubmits, VkFence fence, VkResult result);
    virtual VkResult PostQueueWaitIdle(VkQueue queue, VkResult result);
    virtual VkResult PostQueueBindSparse(VkQueue queue, uint32_t bindInfoCount, VkBindSparseInfo const* pBindInfo, VkFence fence, VkResult result);
    virtual void PreCmdBeginRenderPass(WrappedVkCommandBuffer* commandBuffer, VkRenderPassBeginInfo const* pRenderPassBegin, VkSubpassContents contents);
    virtual void PostCmdBeginRenderPass(WrappedVkCommandBuffer* commandBuffer, VkRenderPassBeginInfo const* pRenderPassBegin, VkSubpassContents contents);
    virtual void PreCmdNextSubpass(WrappedVkCommandBuffer* commandBuffer, VkSubpassContents contents);
    virtual void PostCmdNextSubpass(WrappedVkCommandBuffer* commandBuffer, VkSubpassContents contents);
    virtual void PreCmdEndRenderPass(WrappedVkCommandBuffer* commandBuffer);
    virtual void PostCmdEndRenderPass(WrappedVkCommandBuffer* commandBuffer);
    virtual VkResult PostGetFenceStatus(VkDevice device, VkFence fence, VkResult result);
    virtual VkResult PostWaitForFences(VkDevice device, uint32_t fenceCount, VkFence const* pFences, VkBool32 waitAll, uint64_t timeout, VkResult result);
    virtual VkResult PostCreateSemaphore(VkDevice device, VkSemaphoreCreateInfo const* pCreateInfo, AllocationCallbacks pAllocator, VkSemaphore* pSemaphore, VkResult result);
    virtual void PostDestroySemaphore(VkDevice device, VkSemaphore semaphore, AllocationCallbacks pAllocator);
    virtual void PreCmdSetEvent(WrappedVkCommandBuffer* commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
    virtual void PostCmdSetEvent(WrappedVkCommandBuffer* commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
    virtual void PreCmdResetEvent(WrappedVkCommandBuffer* commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
    virtual void PostCmdResetEvent(WrappedVkCommandBuffer* commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
    virtual void PreCmdWaitEvents(WrappedVkCommandBuffer* commandBuffer, uint32_t eventCount, VkEvent const* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, VkMemoryBarrier const* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, VkBufferMemoryBarrier const* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, VkImageMemoryBarrier const* pImageMemoryBarriers);
    virtual void PostCmdWaitEvents(WrappedVkCommandBuffer* commandBuffer, uint32_t eventCount, VkEvent const* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, VkMemoryBarrier const* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, VkBufferMemoryBarrier const* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, VkImageMemoryBarrier const* pImageMemoryBarriers);
    virtual void PreCmdPipelineBarrier(WrappedVkCommandBuffer* commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, VkMemoryBarrier const* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, VkBufferMemoryBarrier const* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, VkImageMemoryBarrier const* pImageMemoryBarriers);
    virtual void PostCmdPipelineBarrier(WrappedVkCommandBuffer* commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, VkMemoryBarrier const* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, VkBufferMemoryBarrier const* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, VkImageMemoryBarrier const* pImageMemoryBarriers);
    virtual void PreCmdWriteBufferMarkerAMD(WrappedVkCommandBuffer* commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker);
    virtual void PostCmdWriteBufferMarkerAMD(WrappedVkCommandBuffer* commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker);
    virtual void PreCmdDrawIndirectCountAMD(WrappedVkCommandBuffer* commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride);
    virtual void PostCmdDrawIndirectCountAMD(WrappedVkCommandBuffer* commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride);
    virtual void PreCmdDrawIndexedIndirectCountAMD(WrappedVkCommandBuffer* commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride);
    virtual void PostCmdDrawIndexedIndirectCountAMD(WrappedVkCommandBuffer* commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride);
    virtual void PreCmdBeginConditionalRenderingEXT(WrappedVkCommandBuffer* commandBuffer, VkConditionalRenderingBeginInfoEXT const* pConditinalRenderingBegin);
    virtual void PostCmdBeginConditionalRenderingEXT(WrappedVkCommandBuffer* commandBuffer, VkConditionalRenderingBeginInfoEXT const* pConditinalRenderingBegin);
    virtual void PreCmdEndConditionalRenderingEXT(WrappedVkCommandBuffer* commandBuffer);
    virtual void PostCmdEndConditionalRenderingEXT(WrappedVkCommandBuffer* commandBuffer);
    virtual VkResult PreDebugMarkerSetObjectNameEXT(VkDevice device, VkDebugMarkerObjectNameInfoEXT const* pNameInfo);
    virtual VkResult PostDebugMarkerSetObjectNameEXT(VkDevice device, VkDebugMarkerObjectNameInfoEXT const* pNameInfo, VkResult result);
    virtual void PreCmdDebugMarkerBeginEXT(WrappedVkCommandBuffer* commandBuffer, VkDebugMarkerMarkerInfoEXT const* pMarkerInfo);
    virtual void PostCmdDebugMarkerBeginEXT(WrappedVkCommandBuffer* commandBuffer, VkDebugMarkerMarkerInfoEXT const* pMarkerInfo);
    virtual void PreCmdDebugMarkerEndEXT(WrappedVkCommandBuffer* commandBuffer);
    virtual void PostCmdDebugMarkerEndEXT(WrappedVkCommandBuffer* commandBuffer);
    virtual void PreCmdDebugMarkerInsertEXT(WrappedVkCommandBuffer* commandBuffer, VkDebugMarkerMarkerInfoEXT const* pMarkerInfo);
    virtual void PostCmdDebugMarkerInsertEXT(WrappedVkCommandBuffer* commandBuffer, VkDebugMarkerMarkerInfoEXT const* pMarkerInfo);
    virtual VkResult PreSetDebugUtilsObjectNameEXT(VkDevice device, VkDebugUtilsObjectNameInfoEXT const* pNameInfo);
    virtual VkResult PostSetDebugUtilsObjectNameEXT(VkDevice device, VkDebugUtilsObjectNameInfoEXT const* pNameInfo, VkResult result);
    virtual void PreCmdBeginDebugUtilsLabelEXT(WrappedVkCommandBuffer* commandBuffer, VkDebugUtilsLabelEXT const* pLabelInfo);
    virtual void PostCmdBeginDebugUtilsLabelEXT(WrappedVkCommandBuffer* commandBuffer, VkDebugUtilsLabelEXT const* pLabelInfo);
    virtual void PreCmdEndDebugUtilsLabelEXT(WrappedVkCommandBuffer* commandBuffer);
    virtual void PostCmdEndDebugUtilsLabelEXT(WrappedVkCommandBuffer* commandBuffer);
    virtual void PreCmdInsertDebugUtilsLabelEXT(WrappedVkCommandBuffer* commandBuffer, VkDebugUtilsLabelEXT const* pLabelInfo);
    virtual void PostCmdInsertDebugUtilsLabelEXT(WrappedVkCommandBuffer* commandBuffer, VkDebugUtilsLabelEXT const* pLabelInfo);
    virtual void PreCmdSetDeviceMaskKHR(WrappedVkCommandBuffer* commandBuffer, uint32_t deviceMask);
    virtual void PostCmdSetDeviceMaskKHR(WrappedVkCommandBuffer* commandBuffer, uint32_t deviceMask);
    virtual void PreCmdSetDeviceMask(WrappedVkCommandBuffer* commandBuffer, uint32_t deviceMask);
    virtual void PostCmdSetDeviceMask(WrappedVkCommandBuffer* commandBuffer, uint32_t deviceMask);
    virtual void PreCmdDispatchBaseKHR(WrappedVkCommandBuffer* commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
    virtual void PostCmdDispatchBaseKHR(WrappedVkCommandBuffer* commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
    virtual void PreCmdDispatchBase(WrappedVkCommandBuffer* commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
    virtual void PostCmdDispatchBase(WrappedVkCommandBuffer* commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ);
    virtual void PreCmdDrawIndirectCountKHR(WrappedVkCommandBuffer* commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride);
    virtual void PostCmdDrawIndirectCountKHR(WrappedVkCommandBuffer* commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride);
    virtual void PreCmdDrawIndexedIndirectCountKHR(WrappedVkCommandBuffer* commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride);
    virtual void PostCmdDrawIndexedIndirectCountKHR(WrappedVkCommandBuffer* commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride);
    virtual VkResult PostAcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t* pImageIndex, VkResult result);
    virtual VkResult PostQueuePresentKHR(VkQueue queue, VkPresentInfoKHR const* pPresentInfo, VkResult result);
    virtual VkResult PostSignalSemaphoreKHR(VkDevice device, VkSemaphoreSignalInfoKHR const* pSignalInfo, VkResult result);
    virtual VkResult PreWaitSemaphoresKHR(VkDevice device, VkSemaphoreWaitInfoKHR const* pWaitInfo, uint64_t timeout);
    virtual VkResult PostWaitSemaphoresKHR(VkDevice device, VkSemaphoreWaitInfoKHR const* pWaitInfo, uint64_t timeout, VkResult result);
    virtual VkResult PostGetSemaphoreCounterValueKHR(VkDevice device, VkSemaphore semaphore, uint64_t* pValue, VkResult result);
  };
} // end namespace intercept
#endif // INTERCEPTOR_HEADER