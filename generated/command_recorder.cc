/*
 * Copyright (C) 2015 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY apic. DO NOT EDIT.
 */


// clang-format off
#include <iomanip>
#include <sstream>

#include "command_recorder.h"
#include "object_name_db.h"

auto constexpr kIndentDepth = 2;

int NameIdx() {
  const static int name_idx = std::ios::xalloc();
  return name_idx;
}

int IndentIdx() {
  const static int indent_idx = std::ios::xalloc();
  return indent_idx;
}

std::ostream& NewEntry(std::ostream& os) {
  return os << "\n" << std::string(os.iword(IndentIdx()), ' ');
}

std::ostream& OpenBracket(std::ostream& os) {
  os.iword(IndentIdx()) += kIndentDepth;
  return os;
}

std::ostream& CloseBracket(std::ostream& os) {
  os.iword(IndentIdx()) -= kIndentDepth;
  return os;
}

class IndentGuard {
  public:
  IndentGuard(std::ostream& stream, const int indentDepth = kIndentDepth) : stream_(stream), indentDepth_(indentDepth) {
    stream_.iword(IndentIdx()) += indentDepth_;
  }
  ~IndentGuard() { stream_.iword(IndentIdx()) -= indentDepth_; }

  private:
  std::ostream& stream_;
  int indentDepth_;
};

std::string GetObjectInfo(std::ostream& os, uint64_t h) {
  auto name_resolver = reinterpret_cast<ObjectInfoDB *>(os.pword(NameIdx()));
  assert(nullptr != name_resolver);
  std::stringstream ss;
  ss.iword(IndentIdx()) = os.iword(IndentIdx());
  ss << NewEntry;
  return name_resolver->GetObjectInfoNoHandleTag(h, ss.str());
}

std::ostream& operator << (std::ostream& os, const VkInstance &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkPhysicalDevice &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkDevice &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkQueue &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkSemaphore &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkCommandBuffer &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkFence &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkDeviceMemory &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkBuffer &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkImage &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkEvent &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkQueryPool &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkBufferView &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkImageView &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkShaderModule &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkPipelineCache &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkPipelineLayout &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkRenderPass &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkPipeline &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkDescriptorSetLayout &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkSampler &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkDescriptorPool &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkDescriptorSet &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkFramebuffer &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkCommandPool &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkSurfaceKHR &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkSwapchainKHR &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkDisplayKHR &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkDisplayModeKHR &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkDescriptorUpdateTemplate &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}
std::ostream& operator << (std::ostream& os, const VkSamplerYcbcrConversion &a) {
  os << GetObjectInfo(os, reinterpret_cast<uint64_t>(a));
  return os;
}

void CommandRecorder::SetNameResolver(std::ostream &os, const ObjectInfoDB *name_resolver) {
  os.pword(NameIdx()) = (void *)name_resolver;
}

std::ostream& operator << (std::ostream& os, const VkCommandBufferBeginInfo &a);
std::ostream& operator << (std::ostream& os, const VkBufferCopy &a);
std::ostream& operator << (std::ostream& os, const VkImageCopy &a);
std::ostream& operator << (std::ostream& os, const VkImageBlit &a);
std::ostream& operator << (std::ostream& os, const VkBufferImageCopy &a);
std::ostream& operator << (std::ostream& os, const VkClearColorValue &a);
std::ostream& operator << (std::ostream& os, const VkImageSubresourceRange &a);
std::ostream& operator << (std::ostream& os, const VkClearDepthStencilValue &a);
std::ostream& operator << (std::ostream& os, const VkClearAttachment &a);
std::ostream& operator << (std::ostream& os, const VkClearRect &a);
std::ostream& operator << (std::ostream& os, const VkImageResolve &a);
std::ostream& operator << (std::ostream& os, const VkViewport &a);
std::ostream& operator << (std::ostream& os, const VkRect2D &a);
std::ostream& operator << (std::ostream& os, const VkRenderPassBeginInfo &a);
std::ostream& operator << (std::ostream& os, const VkMemoryBarrier &a);
std::ostream& operator << (std::ostream& os, const VkBufferMemoryBarrier &a);
std::ostream& operator << (std::ostream& os, const VkImageMemoryBarrier &a);
std::ostream& operator << (std::ostream& os, const VkConditionalRenderingBeginInfoEXT &a);
std::ostream& operator << (std::ostream& os, const VkDebugMarkerMarkerInfoEXT &a);
std::ostream& operator << (std::ostream& os, const VkDebugUtilsLabelEXT &a);
std::ostream& operator << (std::ostream& os, const VkCommandBufferInheritanceInfo &a);
std::ostream& operator << (std::ostream& os, const VkImageSubresourceLayers &a);
std::ostream& operator << (std::ostream& os, const VkOffset3D &a);
std::ostream& operator << (std::ostream& os, const VkExtent3D &a);
std::ostream& operator << (std::ostream& os, const VkClearValue &a);
std::ostream& operator << (std::ostream& os, const VkOffset2D &a);
std::ostream& operator << (std::ostream& os, const VkExtent2D &a);

std::ostream& operator << (std::ostream& os, const VkCommandBufferBeginInfo &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".sType";
  os << NewEntry;
  os << "value: " << a.sType;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".pNext";
  os << NewEntry;
  if (a.pNext) {
    os << "value: " << a.pNext;
  } else {
    os << "value: nullptr";
  }
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".flags";
  os << NewEntry;
  os << "value: " << a.flags;
  os << CloseBracket << NewEntry;
  // PrintField
  if (a.pInheritanceInfo) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << ".pInheritanceInfo";
    os << NewEntry;
    os << "value: " << *a.pInheritanceInfo;
    os << CloseBracket;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << ".pInheritanceInfo";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket;
  };
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkBufferCopy &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".srcOffset";
  os << NewEntry;
  os << "value: " << a.srcOffset;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".dstOffset";
  os << NewEntry;
  os << "value: " << a.dstOffset;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".size";
  os << NewEntry;
  os << "value: " << a.size;
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkImageCopy &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".srcSubresource";
  os << NewEntry;
  os << "value: " << a.srcSubresource;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".srcOffset";
  os << NewEntry;
  os << "value: " << a.srcOffset;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".dstSubresource";
  os << NewEntry;
  os << "value: " << a.dstSubresource;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".dstOffset";
  os << NewEntry;
  os << "value: " << a.dstOffset;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".extent";
  os << NewEntry;
  os << "value: " << a.extent;
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkImageBlit &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".srcSubresource";
  os << NewEntry;
  os << "value: " << a.srcSubresource;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".srcOffsets";
  os << NewEntry;
  os << "values: [";
    for (uint32_t i = 0; i < 2; ++i) {
      os << a.srcOffsets[i];
      if (i < 2 - 1) {
        os << ", ";
      }
      os << NewEntry;
    }
    os << "]";
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".dstSubresource";
  os << NewEntry;
  os << "value: " << a.dstSubresource;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".dstOffsets";
  os << NewEntry;
  os << "values: [";
    for (uint32_t i = 0; i < 2; ++i) {
      os << a.dstOffsets[i];
      if (i < 2 - 1) {
        os << ", ";
      }
      os << NewEntry;
    }
    os << "]";
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkBufferImageCopy &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".bufferOffset";
  os << NewEntry;
  os << "value: " << a.bufferOffset;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".bufferRowLength";
  os << NewEntry;
  os << "value: " << a.bufferRowLength;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".bufferImageHeight";
  os << NewEntry;
  os << "value: " << a.bufferImageHeight;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".imageSubresource";
  os << NewEntry;
  os << "value: " << a.imageSubresource;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".imageOffset";
  os << NewEntry;
  os << "value: " << a.imageOffset;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".imageExtent";
  os << NewEntry;
  os << "value: " << a.imageExtent;
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkClearColorValue &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".uint32";
  os << NewEntry;
  os << "values: [";
    for (uint32_t i = 0; i < 4; ++i) {
      os << a.uint32[i];
      if (i < 4 - 1) {
        os << ", ";
      }
      os << NewEntry;
    }
    os << "]";
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkImageSubresourceRange &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".aspectMask";
  os << NewEntry;
  os << "value: " << a.aspectMask;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".baseMipLevel";
  os << NewEntry;
  os << "value: " << a.baseMipLevel;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".levelCount";
  os << NewEntry;
  os << "value: " << a.levelCount;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".baseArrayLayer";
  os << NewEntry;
  os << "value: " << a.baseArrayLayer;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".layerCount";
  os << NewEntry;
  os << "value: " << a.layerCount;
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkClearDepthStencilValue &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".depth";
  os << NewEntry;
  os << "value: " << a.depth;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".stencil";
  os << NewEntry;
  os << "value: " << a.stencil;
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkClearAttachment &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".aspectMask";
  os << NewEntry;
  os << "value: " << a.aspectMask;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".colorAttachment";
  os << NewEntry;
  os << "value: " << a.colorAttachment;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".clearValue";
  os << NewEntry;
  os << "value: " << a.clearValue;
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkClearRect &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".rect";
  os << NewEntry;
  os << "value: " << a.rect;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".baseArrayLayer";
  os << NewEntry;
  os << "value: " << a.baseArrayLayer;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".layerCount";
  os << NewEntry;
  os << "value: " << a.layerCount;
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkImageResolve &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".srcSubresource";
  os << NewEntry;
  os << "value: " << a.srcSubresource;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".srcOffset";
  os << NewEntry;
  os << "value: " << a.srcOffset;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".dstSubresource";
  os << NewEntry;
  os << "value: " << a.dstSubresource;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".dstOffset";
  os << NewEntry;
  os << "value: " << a.dstOffset;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".extent";
  os << NewEntry;
  os << "value: " << a.extent;
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkViewport &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".x";
  os << NewEntry;
  os << "value: " << a.x;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".y";
  os << NewEntry;
  os << "value: " << a.y;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".width";
  os << NewEntry;
  os << "value: " << a.width;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".height";
  os << NewEntry;
  os << "value: " << a.height;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".minDepth";
  os << NewEntry;
  os << "value: " << a.minDepth;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".maxDepth";
  os << NewEntry;
  os << "value: " << a.maxDepth;
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkRect2D &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".offset";
  os << NewEntry;
  os << "value: " << a.offset;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".extent";
  os << NewEntry;
  os << "value: " << a.extent;
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkRenderPassBeginInfo &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".sType";
  os << NewEntry;
  os << "value: " << a.sType;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".pNext";
  os << NewEntry;
  if (a.pNext) {
    os << "value: " << a.pNext;
  } else {
    os << "value: nullptr";
  }
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".renderPass";
  os << NewEntry;
  os << "value: " << a.renderPass;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".framebuffer";
  os << NewEntry;
  os << "value: " << a.framebuffer;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".renderArea";
  os << NewEntry;
  os << "value: " << a.renderArea;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".clearValueCount";
  os << NewEntry;
  os << "value: " << a.clearValueCount;
  os << CloseBracket << NewEntry;
  // PrintField
  if (a.pClearValues) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << ".pClearValues";
    os << NewEntry;
    os << "value: " << *a.pClearValues;
    os << CloseBracket;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << ".pClearValues";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket;
  };
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkMemoryBarrier &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".sType";
  os << NewEntry;
  os << "value: " << a.sType;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".pNext";
  os << NewEntry;
  if (a.pNext) {
    os << "value: " << a.pNext;
  } else {
    os << "value: nullptr";
  }
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".srcAccessMask";
  os << NewEntry;
  os << "value: " << a.srcAccessMask;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".dstAccessMask";
  os << NewEntry;
  os << "value: " << a.dstAccessMask;
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkBufferMemoryBarrier &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".sType";
  os << NewEntry;
  os << "value: " << a.sType;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".pNext";
  os << NewEntry;
  if (a.pNext) {
    os << "value: " << a.pNext;
  } else {
    os << "value: nullptr";
  }
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".srcAccessMask";
  os << NewEntry;
  os << "value: " << a.srcAccessMask;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".dstAccessMask";
  os << NewEntry;
  os << "value: " << a.dstAccessMask;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".srcQueueFamilyIndex";
  os << NewEntry;
  os << "value: " << a.srcQueueFamilyIndex;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".dstQueueFamilyIndex";
  os << NewEntry;
  os << "value: " << a.dstQueueFamilyIndex;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".buffer";
  os << NewEntry;
  os << "value: " << a.buffer;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".offset";
  os << NewEntry;
  os << "value: " << a.offset;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".size";
  os << NewEntry;
  os << "value: " << a.size;
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkImageMemoryBarrier &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".sType";
  os << NewEntry;
  os << "value: " << a.sType;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".pNext";
  os << NewEntry;
  if (a.pNext) {
    os << "value: " << a.pNext;
  } else {
    os << "value: nullptr";
  }
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".srcAccessMask";
  os << NewEntry;
  os << "value: " << a.srcAccessMask;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".dstAccessMask";
  os << NewEntry;
  os << "value: " << a.dstAccessMask;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".oldLayout";
  os << NewEntry;
  os << "value: " << a.oldLayout;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".newLayout";
  os << NewEntry;
  os << "value: " << a.newLayout;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".srcQueueFamilyIndex";
  os << NewEntry;
  os << "value: " << a.srcQueueFamilyIndex;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".dstQueueFamilyIndex";
  os << NewEntry;
  os << "value: " << a.dstQueueFamilyIndex;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".image";
  os << NewEntry;
  os << "value: " << a.image;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".subresourceRange";
  os << NewEntry;
  os << "value: " << a.subresourceRange;
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkConditionalRenderingBeginInfoEXT &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".sType";
  os << NewEntry;
  os << "value: " << a.sType;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".pNext";
  os << NewEntry;
  if (a.pNext) {
    os << "value: " << a.pNext;
  } else {
    os << "value: nullptr";
  }
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".buffer";
  os << NewEntry;
  os << "value: " << a.buffer;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".offset";
  os << NewEntry;
  os << "value: " << a.offset;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".flags";
  os << NewEntry;
  os << "value: " << a.flags;
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkDebugMarkerMarkerInfoEXT &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".sType";
  os << NewEntry;
  os << "value: " << a.sType;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".pNext";
  os << NewEntry;
  if (a.pNext) {
    os << "value: " << a.pNext;
  } else {
    os << "value: nullptr";
  }
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".pMarkerName";
  os << NewEntry;
  os << "value: " << "\"" << a.pMarkerName << "\"";
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".color";
  os << NewEntry;
  os << "values: [";
    for (uint32_t i = 0; i < 4; ++i) {
      os << a.color[i];
      if (i < 4 - 1) {
        os << ", ";
      }
      os << NewEntry;
    }
    os << "]";
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkDebugUtilsLabelEXT &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".sType";
  os << NewEntry;
  os << "value: " << a.sType;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".pNext";
  os << NewEntry;
  if (a.pNext) {
    os << "value: " << a.pNext;
  } else {
    os << "value: nullptr";
  }
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".pLabelName";
  os << NewEntry;
  os << "value: " << "\"" << a.pLabelName << "\"";
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".color";
  os << NewEntry;
  os << "values: [";
    for (uint32_t i = 0; i < 4; ++i) {
      os << a.color[i];
      if (i < 4 - 1) {
        os << ", ";
      }
      os << NewEntry;
    }
    os << "]";
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkCommandBufferInheritanceInfo &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".sType";
  os << NewEntry;
  os << "value: " << a.sType;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".pNext";
  os << NewEntry;
  if (a.pNext) {
    os << "value: " << a.pNext;
  } else {
    os << "value: nullptr";
  }
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".renderPass";
  os << NewEntry;
  os << "value: " << a.renderPass;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".subpass";
  os << NewEntry;
  os << "value: " << a.subpass;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".framebuffer";
  os << NewEntry;
  os << "value: " << a.framebuffer;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".occlusionQueryEnable";
  os << NewEntry;
  os << "value: " << a.occlusionQueryEnable;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".queryFlags";
  os << NewEntry;
  os << "value: " << a.queryFlags;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".pipelineStatistics";
  os << NewEntry;
  os << "value: " << a.pipelineStatistics;
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkImageSubresourceLayers &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".aspectMask";
  os << NewEntry;
  os << "value: " << a.aspectMask;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".mipLevel";
  os << NewEntry;
  os << "value: " << a.mipLevel;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".baseArrayLayer";
  os << NewEntry;
  os << "value: " << a.baseArrayLayer;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".layerCount";
  os << NewEntry;
  os << "value: " << a.layerCount;
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkOffset3D &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".x";
  os << NewEntry;
  os << "value: " << a.x;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".y";
  os << NewEntry;
  os << "value: " << a.y;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".z";
  os << NewEntry;
  os << "value: " << a.z;
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkExtent3D &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".width";
  os << NewEntry;
  os << "value: " << a.width;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".height";
  os << NewEntry;
  os << "value: " << a.height;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".depth";
  os << NewEntry;
  os << "value: " << a.depth;
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkClearValue &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".color";
  os << NewEntry;
  os << "value: " << a.color;
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkOffset2D &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".x";
  os << NewEntry;
  os << "value: " << a.x;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".y";
  os << NewEntry;
  os << "value: " << a.y;
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}

std::ostream& operator << (std::ostream& os, const VkExtent2D &a)
{
  os << OpenBracket;
  os << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".width";
  os << NewEntry;
  os << "value: " << a.width;
  os << CloseBracket << NewEntry;
  // PrintField
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << ".height";
  os << NewEntry;
  os << "value: " << a.height;
  os << CloseBracket;
  os << CloseBracket; // Named Op
  return os;
}


template<>
VkCommandBufferBeginInfo *CommandRecorder::CopyArray<VkCommandBufferBeginInfo>(const VkCommandBufferBeginInfo *src, uint64_t start_index, uint64_t count)
{
  auto ptr = reinterpret_cast<VkCommandBufferBeginInfo *>(m_allocator.Alloc(sizeof(VkCommandBufferBeginInfo) * count));
  for (uint64_t i = 0; i < count; ++i) {
    ptr[i].sType = src[start_index + i].sType; // enum
    ptr[i].pNext = src[start_index + i].pNext; // ptr void
    ptr[i].flags = src[start_index + i].flags; // VkCommandBufferUsageFlags
    ptr[i].pInheritanceInfo = nullptr;
    if (src[start_index + i].pInheritanceInfo) {
      ptr[i].pInheritanceInfo = CopyArray<>(src[start_index + i].pInheritanceInfo, 0, 1); // ptr VkCommandBufferInheritanceInfo // todo: do we know count?
    }
  }
  return ptr;
}

template<>
VkBufferCopy *CommandRecorder::CopyArray<VkBufferCopy>(const VkBufferCopy *src, uint64_t start_index, uint64_t count)
{
  auto ptr = reinterpret_cast<VkBufferCopy *>(m_allocator.Alloc(sizeof(VkBufferCopy) * count));
  for (uint64_t i = 0; i < count; ++i) {
    ptr[i].srcOffset = src[start_index + i].srcOffset; // VkDeviceSize
    ptr[i].dstOffset = src[start_index + i].dstOffset; // VkDeviceSize
    ptr[i].size = src[start_index + i].size; // VkDeviceSize
  }
  return ptr;
}

template<>
VkImageCopy *CommandRecorder::CopyArray<VkImageCopy>(const VkImageCopy *src, uint64_t start_index, uint64_t count)
{
  auto ptr = reinterpret_cast<VkImageCopy *>(m_allocator.Alloc(sizeof(VkImageCopy) * count));
  for (uint64_t i = 0; i < count; ++i) {
    ptr[i].srcSubresource = src[start_index + i].srcSubresource; // VkImageSubresourceLayers
    ptr[i].srcOffset = src[start_index + i].srcOffset; // VkOffset3D
    ptr[i].dstSubresource = src[start_index + i].dstSubresource; // VkImageSubresourceLayers
    ptr[i].dstOffset = src[start_index + i].dstOffset; // VkOffset3D
    ptr[i].extent = src[start_index + i].extent; // VkExtent3D
  }
  return ptr;
}

template<>
VkImageBlit *CommandRecorder::CopyArray<VkImageBlit>(const VkImageBlit *src, uint64_t start_index, uint64_t count)
{
  auto ptr = reinterpret_cast<VkImageBlit *>(m_allocator.Alloc(sizeof(VkImageBlit) * count));
  for (uint64_t i = 0; i < count; ++i) {
    ptr[i].srcSubresource = src[start_index + i].srcSubresource; // VkImageSubresourceLayers
    std::memcpy(ptr[i].srcOffsets, src[start_index + i].srcOffsets, sizeof(src[start_index + i].srcOffsets)); // staticArray
    ptr[i].dstSubresource = src[start_index + i].dstSubresource; // VkImageSubresourceLayers
    std::memcpy(ptr[i].dstOffsets, src[start_index + i].dstOffsets, sizeof(src[start_index + i].dstOffsets)); // staticArray
  }
  return ptr;
}

template<>
VkBufferImageCopy *CommandRecorder::CopyArray<VkBufferImageCopy>(const VkBufferImageCopy *src, uint64_t start_index, uint64_t count)
{
  auto ptr = reinterpret_cast<VkBufferImageCopy *>(m_allocator.Alloc(sizeof(VkBufferImageCopy) * count));
  for (uint64_t i = 0; i < count; ++i) {
    ptr[i].bufferOffset = src[start_index + i].bufferOffset; // VkDeviceSize
    ptr[i].bufferRowLength = src[start_index + i].bufferRowLength; // uint32_t
    ptr[i].bufferImageHeight = src[start_index + i].bufferImageHeight; // uint32_t
    ptr[i].imageSubresource = src[start_index + i].imageSubresource; // VkImageSubresourceLayers
    ptr[i].imageOffset = src[start_index + i].imageOffset; // VkOffset3D
    ptr[i].imageExtent = src[start_index + i].imageExtent; // VkExtent3D
  }
  return ptr;
}

template<>
VkClearColorValue *CommandRecorder::CopyArray<VkClearColorValue>(const VkClearColorValue *src, uint64_t start_index, uint64_t count)
{
  auto ptr = reinterpret_cast<VkClearColorValue *>(m_allocator.Alloc(sizeof(VkClearColorValue) * count));
  for (uint64_t i = 0; i < count; ++i) {
    std::memcpy(ptr[i].uint32, src[start_index + i].uint32, sizeof(src[start_index + i].uint32)); // staticArray
  }
  return ptr;
}

template<>
VkImageSubresourceRange *CommandRecorder::CopyArray<VkImageSubresourceRange>(const VkImageSubresourceRange *src, uint64_t start_index, uint64_t count)
{
  auto ptr = reinterpret_cast<VkImageSubresourceRange *>(m_allocator.Alloc(sizeof(VkImageSubresourceRange) * count));
  for (uint64_t i = 0; i < count; ++i) {
    ptr[i].aspectMask = src[start_index + i].aspectMask; // VkImageAspectFlags
    ptr[i].baseMipLevel = src[start_index + i].baseMipLevel; // uint32_t
    ptr[i].levelCount = src[start_index + i].levelCount; // uint32_t
    ptr[i].baseArrayLayer = src[start_index + i].baseArrayLayer; // uint32_t
    ptr[i].layerCount = src[start_index + i].layerCount; // uint32_t
  }
  return ptr;
}

template<>
VkClearDepthStencilValue *CommandRecorder::CopyArray<VkClearDepthStencilValue>(const VkClearDepthStencilValue *src, uint64_t start_index, uint64_t count)
{
  auto ptr = reinterpret_cast<VkClearDepthStencilValue *>(m_allocator.Alloc(sizeof(VkClearDepthStencilValue) * count));
  for (uint64_t i = 0; i < count; ++i) {
    ptr[i].depth = src[start_index + i].depth; // float
    ptr[i].stencil = src[start_index + i].stencil; // uint32_t
  }
  return ptr;
}

template<>
VkClearAttachment *CommandRecorder::CopyArray<VkClearAttachment>(const VkClearAttachment *src, uint64_t start_index, uint64_t count)
{
  auto ptr = reinterpret_cast<VkClearAttachment *>(m_allocator.Alloc(sizeof(VkClearAttachment) * count));
  for (uint64_t i = 0; i < count; ++i) {
    ptr[i].aspectMask = src[start_index + i].aspectMask; // VkImageAspectFlags
    ptr[i].colorAttachment = src[start_index + i].colorAttachment; // uint32_t
    ptr[i].clearValue = src[start_index + i].clearValue; // VkClearValue
  }
  return ptr;
}

template<>
VkClearRect *CommandRecorder::CopyArray<VkClearRect>(const VkClearRect *src, uint64_t start_index, uint64_t count)
{
  auto ptr = reinterpret_cast<VkClearRect *>(m_allocator.Alloc(sizeof(VkClearRect) * count));
  for (uint64_t i = 0; i < count; ++i) {
    ptr[i].rect = src[start_index + i].rect; // VkRect2D
    ptr[i].baseArrayLayer = src[start_index + i].baseArrayLayer; // uint32_t
    ptr[i].layerCount = src[start_index + i].layerCount; // uint32_t
  }
  return ptr;
}

template<>
VkImageResolve *CommandRecorder::CopyArray<VkImageResolve>(const VkImageResolve *src, uint64_t start_index, uint64_t count)
{
  auto ptr = reinterpret_cast<VkImageResolve *>(m_allocator.Alloc(sizeof(VkImageResolve) * count));
  for (uint64_t i = 0; i < count; ++i) {
    ptr[i].srcSubresource = src[start_index + i].srcSubresource; // VkImageSubresourceLayers
    ptr[i].srcOffset = src[start_index + i].srcOffset; // VkOffset3D
    ptr[i].dstSubresource = src[start_index + i].dstSubresource; // VkImageSubresourceLayers
    ptr[i].dstOffset = src[start_index + i].dstOffset; // VkOffset3D
    ptr[i].extent = src[start_index + i].extent; // VkExtent3D
  }
  return ptr;
}

template<>
VkViewport *CommandRecorder::CopyArray<VkViewport>(const VkViewport *src, uint64_t start_index, uint64_t count)
{
  auto ptr = reinterpret_cast<VkViewport *>(m_allocator.Alloc(sizeof(VkViewport) * count));
  for (uint64_t i = 0; i < count; ++i) {
    ptr[i].x = src[start_index + i].x; // float
    ptr[i].y = src[start_index + i].y; // float
    ptr[i].width = src[start_index + i].width; // float
    ptr[i].height = src[start_index + i].height; // float
    ptr[i].minDepth = src[start_index + i].minDepth; // float
    ptr[i].maxDepth = src[start_index + i].maxDepth; // float
  }
  return ptr;
}

template<>
VkRect2D *CommandRecorder::CopyArray<VkRect2D>(const VkRect2D *src, uint64_t start_index, uint64_t count)
{
  auto ptr = reinterpret_cast<VkRect2D *>(m_allocator.Alloc(sizeof(VkRect2D) * count));
  for (uint64_t i = 0; i < count; ++i) {
    ptr[i].offset = src[start_index + i].offset; // VkOffset2D
    ptr[i].extent = src[start_index + i].extent; // VkExtent2D
  }
  return ptr;
}

template<>
VkRenderPassBeginInfo *CommandRecorder::CopyArray<VkRenderPassBeginInfo>(const VkRenderPassBeginInfo *src, uint64_t start_index, uint64_t count)
{
  auto ptr = reinterpret_cast<VkRenderPassBeginInfo *>(m_allocator.Alloc(sizeof(VkRenderPassBeginInfo) * count));
  for (uint64_t i = 0; i < count; ++i) {
    ptr[i].sType = src[start_index + i].sType; // enum
    ptr[i].pNext = src[start_index + i].pNext; // ptr void
    ptr[i].renderPass = src[start_index + i].renderPass; // VkRenderPass
    ptr[i].framebuffer = src[start_index + i].framebuffer; // VkFramebuffer
    ptr[i].renderArea = src[start_index + i].renderArea; // VkRect2D
    ptr[i].clearValueCount = src[start_index + i].clearValueCount; // uint32_t
    ptr[i].pClearValues = nullptr;
    if (src[start_index + i].pClearValues) {
      ptr[i].pClearValues = CopyArray<>(src[start_index + i].pClearValues, 0, 1); // ptr VkClearValue // todo: do we know count?
    }
  }
  return ptr;
}

template<>
VkMemoryBarrier *CommandRecorder::CopyArray<VkMemoryBarrier>(const VkMemoryBarrier *src, uint64_t start_index, uint64_t count)
{
  auto ptr = reinterpret_cast<VkMemoryBarrier *>(m_allocator.Alloc(sizeof(VkMemoryBarrier) * count));
  for (uint64_t i = 0; i < count; ++i) {
    ptr[i].sType = src[start_index + i].sType; // enum
    ptr[i].pNext = src[start_index + i].pNext; // ptr void
    ptr[i].srcAccessMask = src[start_index + i].srcAccessMask; // VkAccessFlags
    ptr[i].dstAccessMask = src[start_index + i].dstAccessMask; // VkAccessFlags
  }
  return ptr;
}

template<>
VkBufferMemoryBarrier *CommandRecorder::CopyArray<VkBufferMemoryBarrier>(const VkBufferMemoryBarrier *src, uint64_t start_index, uint64_t count)
{
  auto ptr = reinterpret_cast<VkBufferMemoryBarrier *>(m_allocator.Alloc(sizeof(VkBufferMemoryBarrier) * count));
  for (uint64_t i = 0; i < count; ++i) {
    ptr[i].sType = src[start_index + i].sType; // enum
    ptr[i].pNext = src[start_index + i].pNext; // ptr void
    ptr[i].srcAccessMask = src[start_index + i].srcAccessMask; // VkAccessFlags
    ptr[i].dstAccessMask = src[start_index + i].dstAccessMask; // VkAccessFlags
    ptr[i].srcQueueFamilyIndex = src[start_index + i].srcQueueFamilyIndex; // uint32_t
    ptr[i].dstQueueFamilyIndex = src[start_index + i].dstQueueFamilyIndex; // uint32_t
    ptr[i].buffer = src[start_index + i].buffer; // VkBuffer
    ptr[i].offset = src[start_index + i].offset; // VkDeviceSize
    ptr[i].size = src[start_index + i].size; // VkDeviceSize
  }
  return ptr;
}

template<>
VkImageMemoryBarrier *CommandRecorder::CopyArray<VkImageMemoryBarrier>(const VkImageMemoryBarrier *src, uint64_t start_index, uint64_t count)
{
  auto ptr = reinterpret_cast<VkImageMemoryBarrier *>(m_allocator.Alloc(sizeof(VkImageMemoryBarrier) * count));
  for (uint64_t i = 0; i < count; ++i) {
    ptr[i].sType = src[start_index + i].sType; // enum
    ptr[i].pNext = src[start_index + i].pNext; // ptr void
    ptr[i].srcAccessMask = src[start_index + i].srcAccessMask; // VkAccessFlags
    ptr[i].dstAccessMask = src[start_index + i].dstAccessMask; // VkAccessFlags
    ptr[i].oldLayout = src[start_index + i].oldLayout; // enum
    ptr[i].newLayout = src[start_index + i].newLayout; // enum
    ptr[i].srcQueueFamilyIndex = src[start_index + i].srcQueueFamilyIndex; // uint32_t
    ptr[i].dstQueueFamilyIndex = src[start_index + i].dstQueueFamilyIndex; // uint32_t
    ptr[i].image = src[start_index + i].image; // VkImage
    ptr[i].subresourceRange = src[start_index + i].subresourceRange; // VkImageSubresourceRange
  }
  return ptr;
}

template<>
VkConditionalRenderingBeginInfoEXT *CommandRecorder::CopyArray<VkConditionalRenderingBeginInfoEXT>(const VkConditionalRenderingBeginInfoEXT *src, uint64_t start_index, uint64_t count)
{
  auto ptr = reinterpret_cast<VkConditionalRenderingBeginInfoEXT *>(m_allocator.Alloc(sizeof(VkConditionalRenderingBeginInfoEXT) * count));
  for (uint64_t i = 0; i < count; ++i) {
    ptr[i].sType = src[start_index + i].sType; // enum
    ptr[i].pNext = src[start_index + i].pNext; // ptr void
    ptr[i].buffer = src[start_index + i].buffer; // VkBuffer
    ptr[i].offset = src[start_index + i].offset; // VkDeviceSize
    ptr[i].flags = src[start_index + i].flags; // VkConditionalRenderingFlagsEXT
  }
  return ptr;
}

template<>
VkDebugMarkerMarkerInfoEXT *CommandRecorder::CopyArray<VkDebugMarkerMarkerInfoEXT>(const VkDebugMarkerMarkerInfoEXT *src, uint64_t start_index, uint64_t count)
{
  auto ptr = reinterpret_cast<VkDebugMarkerMarkerInfoEXT *>(m_allocator.Alloc(sizeof(VkDebugMarkerMarkerInfoEXT) * count));
  for (uint64_t i = 0; i < count; ++i) {
    ptr[i].sType = src[start_index + i].sType; // enum
    ptr[i].pNext = src[start_index + i].pNext; // ptr void
    ptr[i].pMarkerName = nullptr;
    if (src[start_index + i].pMarkerName) {
      ptr[i].pMarkerName = CopyArray<>(src[start_index + i].pMarkerName, 0, strlen(src[start_index + i].pMarkerName));
    }
    std::memcpy(ptr[i].color, src[start_index + i].color, sizeof(src[start_index + i].color)); // staticArray
  }
  return ptr;
}

template<>
VkDebugUtilsLabelEXT *CommandRecorder::CopyArray<VkDebugUtilsLabelEXT>(const VkDebugUtilsLabelEXT *src, uint64_t start_index, uint64_t count)
{
  auto ptr = reinterpret_cast<VkDebugUtilsLabelEXT *>(m_allocator.Alloc(sizeof(VkDebugUtilsLabelEXT) * count));
  for (uint64_t i = 0; i < count; ++i) {
    ptr[i].sType = src[start_index + i].sType; // enum
    ptr[i].pNext = src[start_index + i].pNext; // ptr void
    ptr[i].pLabelName = nullptr;
    if (src[start_index + i].pLabelName) {
      ptr[i].pLabelName = CopyArray<>(src[start_index + i].pLabelName, 0, strlen(src[start_index + i].pLabelName));
    }
    std::memcpy(ptr[i].color, src[start_index + i].color, sizeof(src[start_index + i].color)); // staticArray
  }
  return ptr;
}

void CommandRecorder::PrintBeginCommandBufferArgs(std::ostream &os, const BeginCommandBufferArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "pBeginInfo";
  os << NewEntry;
  os << "members:";
  os << *args.pBeginInfo;
  os << CloseBracket << NewEntry;;
}

void CommandRecorder::PrintEndCommandBufferArgs(std::ostream &os, const EndCommandBufferArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket;
}

void CommandRecorder::PrintResetCommandBufferArgs(std::ostream &os, const ResetCommandBufferArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "flags";
  os << NewEntry;
  os << "value: " << args.flags;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdExecuteCommandsArgs(std::ostream &os, const CmdExecuteCommandsArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBufferCount";
  os << NewEntry;
  os << "value: " << args.commandBufferCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  if (args.pCommandBuffers) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pCommandBuffers";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.commandBufferCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.commandBufferCount; i++) {
        os << "- # VkCommandBuffer";
        os << OpenBracket << NewEntry;
        os << "value: ";
        os << args.pCommandBuffers[i];
        os << CloseBracket;
        if (i < (uint64_t)args.commandBufferCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pCommandBuffers";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
  ;
}

void CommandRecorder::PrintCmdCopyBufferArgs(std::ostream &os, const CmdCopyBufferArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "srcBuffer";
  os << NewEntry;
  os << "value: " << args.srcBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "dstBuffer";
  os << NewEntry;
  os << "value: " << args.dstBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "regionCount";
  os << NewEntry;
  os << "value: " << args.regionCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  if (args.pRegions) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pRegions";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.regionCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.regionCount; i++) {
        os << "- # VkBufferCopy";
        os << OpenBracket << NewEntry;
        os << "members:";
        os << args.pRegions[i];
        os << CloseBracket;
        if (i < (uint64_t)args.regionCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pRegions";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
  ;
}

void CommandRecorder::PrintCmdCopyImageArgs(std::ostream &os, const CmdCopyImageArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "srcImage";
  os << NewEntry;
  os << "value: " << args.srcImage;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "srcImageLayout";
  os << NewEntry;
  os << "value: " << args.srcImageLayout;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "dstImage";
  os << NewEntry;
  os << "value: " << args.dstImage;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "dstImageLayout";
  os << NewEntry;
  os << "value: " << args.dstImageLayout;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "regionCount";
  os << NewEntry;
  os << "value: " << args.regionCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  if (args.pRegions) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pRegions";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.regionCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.regionCount; i++) {
        os << "- # VkImageCopy";
        os << OpenBracket << NewEntry;
        os << "members:";
        os << args.pRegions[i];
        os << CloseBracket;
        if (i < (uint64_t)args.regionCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pRegions";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
  ;
}

void CommandRecorder::PrintCmdBlitImageArgs(std::ostream &os, const CmdBlitImageArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "srcImage";
  os << NewEntry;
  os << "value: " << args.srcImage;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "srcImageLayout";
  os << NewEntry;
  os << "value: " << args.srcImageLayout;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "dstImage";
  os << NewEntry;
  os << "value: " << args.dstImage;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "dstImageLayout";
  os << NewEntry;
  os << "value: " << args.dstImageLayout;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "regionCount";
  os << NewEntry;
  os << "value: " << args.regionCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "filter";
  os << NewEntry;
  os << "value: " << args.filter;
  os << CloseBracket << NewEntry;
  if (args.pRegions) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pRegions";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.regionCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.regionCount; i++) {
        os << "- # VkImageBlit";
        os << OpenBracket << NewEntry;
        os << "members:";
        os << args.pRegions[i];
        os << CloseBracket;
        if (i < (uint64_t)args.regionCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pRegions";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
  ;
}

void CommandRecorder::PrintCmdCopyBufferToImageArgs(std::ostream &os, const CmdCopyBufferToImageArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "srcBuffer";
  os << NewEntry;
  os << "value: " << args.srcBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "dstImage";
  os << NewEntry;
  os << "value: " << args.dstImage;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "dstImageLayout";
  os << NewEntry;
  os << "value: " << args.dstImageLayout;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "regionCount";
  os << NewEntry;
  os << "value: " << args.regionCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  if (args.pRegions) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pRegions";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.regionCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.regionCount; i++) {
        os << "- # VkBufferImageCopy";
        os << OpenBracket << NewEntry;
        os << "members:";
        os << args.pRegions[i];
        os << CloseBracket;
        if (i < (uint64_t)args.regionCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pRegions";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
  ;
}

void CommandRecorder::PrintCmdCopyImageToBufferArgs(std::ostream &os, const CmdCopyImageToBufferArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "srcImage";
  os << NewEntry;
  os << "value: " << args.srcImage;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "srcImageLayout";
  os << NewEntry;
  os << "value: " << args.srcImageLayout;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "dstBuffer";
  os << NewEntry;
  os << "value: " << args.dstBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "regionCount";
  os << NewEntry;
  os << "value: " << args.regionCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  if (args.pRegions) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pRegions";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.regionCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.regionCount; i++) {
        os << "- # VkBufferImageCopy";
        os << OpenBracket << NewEntry;
        os << "members:";
        os << args.pRegions[i];
        os << CloseBracket;
        if (i < (uint64_t)args.regionCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pRegions";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
  ;
}

void CommandRecorder::PrintCmdUpdateBufferArgs(std::ostream &os, const CmdUpdateBufferArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "dstBuffer";
  os << NewEntry;
  os << "value: " << args.dstBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "dstOffset";
  os << NewEntry;
  os << "value: " << args.dstOffset;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "dataSize";
  os << NewEntry;
  os << "value: " << args.dataSize;
  os << CloseBracket << NewEntry;
  // PrintCommandArg;
}

void CommandRecorder::PrintCmdFillBufferArgs(std::ostream &os, const CmdFillBufferArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "dstBuffer";
  os << NewEntry;
  os << "value: " << args.dstBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "dstOffset";
  os << NewEntry;
  os << "value: " << args.dstOffset;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "size";
  os << NewEntry;
  os << "value: " << args.size;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "data";
  os << NewEntry;
  os << "value: " << args.data;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdClearColorImageArgs(std::ostream &os, const CmdClearColorImageArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "image";
  os << NewEntry;
  os << "value: " << args.image;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "imageLayout";
  os << NewEntry;
  os << "value: " << args.imageLayout;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "rangeCount";
  os << NewEntry;
  os << "value: " << args.rangeCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "pColor";
  os << NewEntry;
  os << "members:";
  os << *args.pColor;
  os << CloseBracket << NewEntry;
  if (args.pRanges) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pRanges";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.rangeCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.rangeCount; i++) {
        os << "- # VkImageSubresourceRange";
        os << OpenBracket << NewEntry;
        os << "members:";
        os << args.pRanges[i];
        os << CloseBracket;
        if (i < (uint64_t)args.rangeCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pRanges";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
  ;
}

void CommandRecorder::PrintCmdClearDepthStencilImageArgs(std::ostream &os, const CmdClearDepthStencilImageArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "image";
  os << NewEntry;
  os << "value: " << args.image;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "imageLayout";
  os << NewEntry;
  os << "value: " << args.imageLayout;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "rangeCount";
  os << NewEntry;
  os << "value: " << args.rangeCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "pDepthStencil";
  os << NewEntry;
  os << "members:";
  os << *args.pDepthStencil;
  os << CloseBracket << NewEntry;
  if (args.pRanges) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pRanges";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.rangeCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.rangeCount; i++) {
        os << "- # VkImageSubresourceRange";
        os << OpenBracket << NewEntry;
        os << "members:";
        os << args.pRanges[i];
        os << CloseBracket;
        if (i < (uint64_t)args.rangeCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pRanges";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
  ;
}

void CommandRecorder::PrintCmdClearAttachmentsArgs(std::ostream &os, const CmdClearAttachmentsArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "attachmentCount";
  os << NewEntry;
  os << "value: " << args.attachmentCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "rectCount";
  os << NewEntry;
  os << "value: " << args.rectCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  if (args.pAttachments) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pAttachments";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.attachmentCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.attachmentCount; i++) {
        os << "- # VkClearAttachment";
        os << OpenBracket << NewEntry;
        os << "members:";
        os << args.pAttachments[i];
        os << CloseBracket;
        if (i < (uint64_t)args.attachmentCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pAttachments";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
  if (args.pRects) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pRects";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.rectCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.rectCount; i++) {
        os << "- # VkClearRect";
        os << OpenBracket << NewEntry;
        os << "members:";
        os << args.pRects[i];
        os << CloseBracket;
        if (i < (uint64_t)args.rectCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pRects";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
  ;
}

void CommandRecorder::PrintCmdResolveImageArgs(std::ostream &os, const CmdResolveImageArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "srcImage";
  os << NewEntry;
  os << "value: " << args.srcImage;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "srcImageLayout";
  os << NewEntry;
  os << "value: " << args.srcImageLayout;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "dstImage";
  os << NewEntry;
  os << "value: " << args.dstImage;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "dstImageLayout";
  os << NewEntry;
  os << "value: " << args.dstImageLayout;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "regionCount";
  os << NewEntry;
  os << "value: " << args.regionCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  if (args.pRegions) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pRegions";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.regionCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.regionCount; i++) {
        os << "- # VkImageResolve";
        os << OpenBracket << NewEntry;
        os << "members:";
        os << args.pRegions[i];
        os << CloseBracket;
        if (i < (uint64_t)args.regionCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pRegions";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
  ;
}

void CommandRecorder::PrintCmdBindDescriptorSetsArgs(std::ostream &os, const CmdBindDescriptorSetsArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "pipelineBindPoint";
  os << NewEntry;
  os << "value: " << args.pipelineBindPoint;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "layout";
  os << NewEntry;
  os << "value: " << args.layout;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "firstSet";
  os << NewEntry;
  os << "value: " << args.firstSet;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "descriptorSetCount";
  os << NewEntry;
  os << "value: " << args.descriptorSetCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "dynamicOffsetCount";
  os << NewEntry;
  os << "value: " << args.dynamicOffsetCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  if (args.pDescriptorSets) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pDescriptorSets";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.descriptorSetCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.descriptorSetCount; i++) {
        os << "- # VkDescriptorSet";
        os << OpenBracket << NewEntry;
        os << "value: ";
        os << args.pDescriptorSets[i];
        os << CloseBracket;
        if (i < (uint64_t)args.descriptorSetCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pDescriptorSets";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
  if (args.pDynamicOffsets) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pDynamicOffsets";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.dynamicOffsetCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.dynamicOffsetCount; i++) {
        os << "- # u32";
        os << OpenBracket << NewEntry;
        os << "value: ";
        os << args.pDynamicOffsets[i];
        os << CloseBracket;
        if (i < (uint64_t)args.dynamicOffsetCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pDynamicOffsets";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
  ;
}

void CommandRecorder::PrintCmdPushConstantsArgs(std::ostream &os, const CmdPushConstantsArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "layout";
  os << NewEntry;
  os << "value: " << args.layout;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "stageFlags";
  os << NewEntry;
  os << "value: " << args.stageFlags;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "offset";
  os << NewEntry;
  os << "value: " << args.offset;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "size";
  os << NewEntry;
  os << "value: " << args.size;
  os << CloseBracket << NewEntry;
  // PrintCommandArg;
}

void CommandRecorder::PrintCmdBindIndexBufferArgs(std::ostream &os, const CmdBindIndexBufferArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "buffer";
  os << NewEntry;
  os << "value: " << args.buffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "offset";
  os << NewEntry;
  os << "value: " << args.offset;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "indexType";
  os << NewEntry;
  os << "value: " << args.indexType;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdBindVertexBuffersArgs(std::ostream &os, const CmdBindVertexBuffersArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "firstBinding";
  os << NewEntry;
  os << "value: " << args.firstBinding;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "bindingCount";
  os << NewEntry;
  os << "value: " << args.bindingCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  // PrintCommandArg << NewEntry;
  if (args.pBuffers) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pBuffers";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.bindingCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.bindingCount; i++) {
        os << "- # VkBuffer";
        os << OpenBracket << NewEntry;
        os << "value: ";
        os << args.pBuffers[i];
        os << CloseBracket;
        if (i < (uint64_t)args.bindingCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pBuffers";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
  if (args.pOffsets) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pOffsets";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.bindingCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.bindingCount; i++) {
        os << "- # VkDeviceSize";
        os << OpenBracket << NewEntry;
        os << "value: ";
        os << args.pOffsets[i];
        os << CloseBracket;
        if (i < (uint64_t)args.bindingCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pOffsets";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
  ;
}

void CommandRecorder::PrintCmdDrawArgs(std::ostream &os, const CmdDrawArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "vertexCount";
  os << NewEntry;
  os << "value: " << args.vertexCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "instanceCount";
  os << NewEntry;
  os << "value: " << args.instanceCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "firstVertex";
  os << NewEntry;
  os << "value: " << args.firstVertex;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "firstInstance";
  os << NewEntry;
  os << "value: " << args.firstInstance;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdDrawIndexedArgs(std::ostream &os, const CmdDrawIndexedArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "indexCount";
  os << NewEntry;
  os << "value: " << args.indexCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "instanceCount";
  os << NewEntry;
  os << "value: " << args.instanceCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "firstIndex";
  os << NewEntry;
  os << "value: " << args.firstIndex;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "vertexOffset";
  os << NewEntry;
  os << "value: " << args.vertexOffset;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "firstInstance";
  os << NewEntry;
  os << "value: " << args.firstInstance;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdDrawIndirectArgs(std::ostream &os, const CmdDrawIndirectArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "buffer";
  os << NewEntry;
  os << "value: " << args.buffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "offset";
  os << NewEntry;
  os << "value: " << args.offset;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "drawCount";
  os << NewEntry;
  os << "value: " << args.drawCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "stride";
  os << NewEntry;
  os << "value: " << args.stride;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdDrawIndexedIndirectArgs(std::ostream &os, const CmdDrawIndexedIndirectArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "buffer";
  os << NewEntry;
  os << "value: " << args.buffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "offset";
  os << NewEntry;
  os << "value: " << args.offset;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "drawCount";
  os << NewEntry;
  os << "value: " << args.drawCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "stride";
  os << NewEntry;
  os << "value: " << args.stride;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdDispatchArgs(std::ostream &os, const CmdDispatchArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "groupCountX";
  os << NewEntry;
  os << "value: " << args.groupCountX;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "groupCountY";
  os << NewEntry;
  os << "value: " << args.groupCountY;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "groupCountZ";
  os << NewEntry;
  os << "value: " << args.groupCountZ;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdDispatchIndirectArgs(std::ostream &os, const CmdDispatchIndirectArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "buffer";
  os << NewEntry;
  os << "value: " << args.buffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "offset";
  os << NewEntry;
  os << "value: " << args.offset;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdBindPipelineArgs(std::ostream &os, const CmdBindPipelineArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "pipelineBindPoint";
  os << NewEntry;
  os << "value: " << args.pipelineBindPoint;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "pipeline";
  os << NewEntry;
  os << "value: " << args.pipeline;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdSetViewportArgs(std::ostream &os, const CmdSetViewportArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "firstViewport";
  os << NewEntry;
  os << "value: " << args.firstViewport;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "viewportCount";
  os << NewEntry;
  os << "value: " << args.viewportCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  if (args.pViewports) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pViewports";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.viewportCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.viewportCount; i++) {
        os << "- # VkViewport";
        os << OpenBracket << NewEntry;
        os << "members:";
        os << args.pViewports[i];
        os << CloseBracket;
        if (i < (uint64_t)args.viewportCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pViewports";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
}

void CommandRecorder::PrintCmdSetScissorArgs(std::ostream &os, const CmdSetScissorArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "firstScissor";
  os << NewEntry;
  os << "value: " << args.firstScissor;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "scissorCount";
  os << NewEntry;
  os << "value: " << args.scissorCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  if (args.pScissors) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pScissors";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.scissorCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.scissorCount; i++) {
        os << "- # VkRect2D";
        os << OpenBracket << NewEntry;
        os << "members:";
        os << args.pScissors[i];
        os << CloseBracket;
        if (i < (uint64_t)args.scissorCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pScissors";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
}

void CommandRecorder::PrintCmdSetLineWidthArgs(std::ostream &os, const CmdSetLineWidthArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "lineWidth";
  os << NewEntry;
  os << "value: " << args.lineWidth;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdSetDepthBiasArgs(std::ostream &os, const CmdSetDepthBiasArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "depthBiasConstantFactor";
  os << NewEntry;
  os << "value: " << args.depthBiasConstantFactor;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "depthBiasClamp";
  os << NewEntry;
  os << "value: " << args.depthBiasClamp;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "depthBiasSlopeFactor";
  os << NewEntry;
  os << "value: " << args.depthBiasSlopeFactor;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdSetBlendConstantsArgs(std::ostream &os, const CmdSetBlendConstantsArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "blendConstants";
  os << NewEntry;
  os << "values: [";
    for (uint32_t i = 0; i < 4; ++i) {
      os << args.blendConstants[i];
      if (i < 4 - 1) {
        os << ", ";
      }
      os << NewEntry;
    }
    os << "]";
  os << CloseBracket;
}

void CommandRecorder::PrintCmdSetDepthBoundsArgs(std::ostream &os, const CmdSetDepthBoundsArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "minDepthBounds";
  os << NewEntry;
  os << "value: " << args.minDepthBounds;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "maxDepthBounds";
  os << NewEntry;
  os << "value: " << args.maxDepthBounds;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdSetStencilCompareMaskArgs(std::ostream &os, const CmdSetStencilCompareMaskArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "faceMask";
  os << NewEntry;
  os << "value: " << args.faceMask;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "compareMask";
  os << NewEntry;
  os << "value: " << args.compareMask;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdSetStencilWriteMaskArgs(std::ostream &os, const CmdSetStencilWriteMaskArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "faceMask";
  os << NewEntry;
  os << "value: " << args.faceMask;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "writeMask";
  os << NewEntry;
  os << "value: " << args.writeMask;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdSetStencilReferenceArgs(std::ostream &os, const CmdSetStencilReferenceArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "faceMask";
  os << NewEntry;
  os << "value: " << args.faceMask;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "reference";
  os << NewEntry;
  os << "value: " << args.reference;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdBeginQueryArgs(std::ostream &os, const CmdBeginQueryArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "queryPool";
  os << NewEntry;
  os << "value: " << args.queryPool;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "query";
  os << NewEntry;
  os << "value: " << args.query;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "flags";
  os << NewEntry;
  os << "value: " << args.flags;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdEndQueryArgs(std::ostream &os, const CmdEndQueryArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "queryPool";
  os << NewEntry;
  os << "value: " << args.queryPool;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "query";
  os << NewEntry;
  os << "value: " << args.query;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdResetQueryPoolArgs(std::ostream &os, const CmdResetQueryPoolArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "queryPool";
  os << NewEntry;
  os << "value: " << args.queryPool;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "firstQuery";
  os << NewEntry;
  os << "value: " << args.firstQuery;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "queryCount";
  os << NewEntry;
  os << "value: " << args.queryCount;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdWriteTimestampArgs(std::ostream &os, const CmdWriteTimestampArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "pipelineStage";
  os << NewEntry;
  os << "value: " << args.pipelineStage;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "queryPool";
  os << NewEntry;
  os << "value: " << args.queryPool;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "query";
  os << NewEntry;
  os << "value: " << args.query;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdCopyQueryPoolResultsArgs(std::ostream &os, const CmdCopyQueryPoolResultsArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "queryPool";
  os << NewEntry;
  os << "value: " << args.queryPool;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "firstQuery";
  os << NewEntry;
  os << "value: " << args.firstQuery;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "queryCount";
  os << NewEntry;
  os << "value: " << args.queryCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "dstBuffer";
  os << NewEntry;
  os << "value: " << args.dstBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "dstOffset";
  os << NewEntry;
  os << "value: " << args.dstOffset;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "stride";
  os << NewEntry;
  os << "value: " << args.stride;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "flags";
  os << NewEntry;
  os << "value: " << args.flags;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdBeginRenderPassArgs(std::ostream &os, const CmdBeginRenderPassArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "contents";
  os << NewEntry;
  os << "value: " << args.contents;
  os << CloseBracket << NewEntry;
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "pRenderPassBegin";
  os << NewEntry;
  os << "members:";
  os << *args.pRenderPassBegin;
  os << CloseBracket << NewEntry;;
}

void CommandRecorder::PrintCmdNextSubpassArgs(std::ostream &os, const CmdNextSubpassArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "contents";
  os << NewEntry;
  os << "value: " << args.contents;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdEndRenderPassArgs(std::ostream &os, const CmdEndRenderPassArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdSetEventArgs(std::ostream &os, const CmdSetEventArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "event";
  os << NewEntry;
  os << "value: " << args.event;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "stageMask";
  os << NewEntry;
  os << "value: " << args.stageMask;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdResetEventArgs(std::ostream &os, const CmdResetEventArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "event";
  os << NewEntry;
  os << "value: " << args.event;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "stageMask";
  os << NewEntry;
  os << "value: " << args.stageMask;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdWaitEventsArgs(std::ostream &os, const CmdWaitEventsArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "eventCount";
  os << NewEntry;
  os << "value: " << args.eventCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "srcStageMask";
  os << NewEntry;
  os << "value: " << args.srcStageMask;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "dstStageMask";
  os << NewEntry;
  os << "value: " << args.dstStageMask;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "memoryBarrierCount";
  os << NewEntry;
  os << "value: " << args.memoryBarrierCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "bufferMemoryBarrierCount";
  os << NewEntry;
  os << "value: " << args.bufferMemoryBarrierCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "imageMemoryBarrierCount";
  os << NewEntry;
  os << "value: " << args.imageMemoryBarrierCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  if (args.pEvents) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pEvents";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.eventCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.eventCount; i++) {
        os << "- # VkEvent";
        os << OpenBracket << NewEntry;
        os << "value: ";
        os << args.pEvents[i];
        os << CloseBracket;
        if (i < (uint64_t)args.eventCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pEvents";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
  if (args.pMemoryBarriers) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pMemoryBarriers";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.memoryBarrierCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.memoryBarrierCount; i++) {
        os << "- # VkMemoryBarrier";
        os << OpenBracket << NewEntry;
        os << "members:";
        os << args.pMemoryBarriers[i];
        os << CloseBracket;
        if (i < (uint64_t)args.memoryBarrierCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pMemoryBarriers";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
  if (args.pBufferMemoryBarriers) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pBufferMemoryBarriers";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.bufferMemoryBarrierCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.bufferMemoryBarrierCount; i++) {
        os << "- # VkBufferMemoryBarrier";
        os << OpenBracket << NewEntry;
        os << "members:";
        os << args.pBufferMemoryBarriers[i];
        os << CloseBracket;
        if (i < (uint64_t)args.bufferMemoryBarrierCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pBufferMemoryBarriers";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
  if (args.pImageMemoryBarriers) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pImageMemoryBarriers";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.imageMemoryBarrierCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.imageMemoryBarrierCount; i++) {
        os << "- # VkImageMemoryBarrier";
        os << OpenBracket << NewEntry;
        os << "members:";
        os << args.pImageMemoryBarriers[i];
        os << CloseBracket;
        if (i < (uint64_t)args.imageMemoryBarrierCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pImageMemoryBarriers";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
  ;
}

void CommandRecorder::PrintCmdPipelineBarrierArgs(std::ostream &os, const CmdPipelineBarrierArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "srcStageMask";
  os << NewEntry;
  os << "value: " << args.srcStageMask;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "dstStageMask";
  os << NewEntry;
  os << "value: " << args.dstStageMask;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "dependencyFlags";
  os << NewEntry;
  os << "value: " << args.dependencyFlags;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "memoryBarrierCount";
  os << NewEntry;
  os << "value: " << args.memoryBarrierCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "bufferMemoryBarrierCount";
  os << NewEntry;
  os << "value: " << args.bufferMemoryBarrierCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "imageMemoryBarrierCount";
  os << NewEntry;
  os << "value: " << args.imageMemoryBarrierCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  if (args.pMemoryBarriers) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pMemoryBarriers";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.memoryBarrierCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.memoryBarrierCount; i++) {
        os << "- # VkMemoryBarrier";
        os << OpenBracket << NewEntry;
        os << "members:";
        os << args.pMemoryBarriers[i];
        os << CloseBracket;
        if (i < (uint64_t)args.memoryBarrierCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pMemoryBarriers";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
  if (args.pBufferMemoryBarriers) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pBufferMemoryBarriers";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.bufferMemoryBarrierCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.bufferMemoryBarrierCount; i++) {
        os << "- # VkBufferMemoryBarrier";
        os << OpenBracket << NewEntry;
        os << "members:";
        os << args.pBufferMemoryBarriers[i];
        os << CloseBracket;
        if (i < (uint64_t)args.bufferMemoryBarrierCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pBufferMemoryBarriers";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
  if (args.pImageMemoryBarriers) {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pImageMemoryBarriers";
    os << NewEntry;
    os <<"members:";
    os << OpenBracket << NewEntry;
    if ((uint64_t)args.imageMemoryBarrierCount > 0) {
      for (uint32_t i = (uint64_t)(static_cast<uint32_t>(0U)); i < (uint64_t)args.imageMemoryBarrierCount; i++) {
        os << "- # VkImageMemoryBarrier";
        os << OpenBracket << NewEntry;
        os << "members:";
        os << args.pImageMemoryBarriers[i];
        os << CloseBracket;
        if (i < (uint64_t)args.imageMemoryBarrierCount - 1) {
          os << NewEntry;
        }
      }
    }
    os << CloseBracket;
    os << CloseBracket << NewEntry;
  } else {
    os << "- # parameter:";
    os << OpenBracket << NewEntry;
    os << "name: " << "pImageMemoryBarriers";
    os << NewEntry;
    os << "value: nullptr";
    os << CloseBracket << NewEntry;
  }
  os << "";
  ;
}

void CommandRecorder::PrintCmdWriteBufferMarkerAMDArgs(std::ostream &os, const CmdWriteBufferMarkerAMDArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "pipelineStage";
  os << NewEntry;
  os << "value: " << args.pipelineStage;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "dstBuffer";
  os << NewEntry;
  os << "value: " << args.dstBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "dstOffset";
  os << NewEntry;
  os << "value: " << args.dstOffset;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "marker";
  os << NewEntry;
  os << "value: " << args.marker;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdDrawIndirectCountAMDArgs(std::ostream &os, const CmdDrawIndirectCountAMDArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "buffer";
  os << NewEntry;
  os << "value: " << args.buffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "offset";
  os << NewEntry;
  os << "value: " << args.offset;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "countBuffer";
  os << NewEntry;
  os << "value: " << args.countBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "countOffset";
  os << NewEntry;
  os << "value: " << args.countOffset;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "maxDrawCount";
  os << NewEntry;
  os << "value: " << args.maxDrawCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "stride";
  os << NewEntry;
  os << "value: " << args.stride;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdDrawIndexedIndirectCountAMDArgs(std::ostream &os, const CmdDrawIndexedIndirectCountAMDArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "buffer";
  os << NewEntry;
  os << "value: " << args.buffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "offset";
  os << NewEntry;
  os << "value: " << args.offset;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "countBuffer";
  os << NewEntry;
  os << "value: " << args.countBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "countOffset";
  os << NewEntry;
  os << "value: " << args.countOffset;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "maxDrawCount";
  os << NewEntry;
  os << "value: " << args.maxDrawCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "stride";
  os << NewEntry;
  os << "value: " << args.stride;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdBeginConditionalRenderingEXTArgs(std::ostream &os, const CmdBeginConditionalRenderingEXTArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg;
}

void CommandRecorder::PrintCmdEndConditionalRenderingEXTArgs(std::ostream &os, const CmdEndConditionalRenderingEXTArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdDebugMarkerBeginEXTArgs(std::ostream &os, const CmdDebugMarkerBeginEXTArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "pMarkerInfo";
  os << NewEntry;
  os << "members:";
  os << *args.pMarkerInfo;
  os << CloseBracket << NewEntry;;
}

void CommandRecorder::PrintCmdDebugMarkerEndEXTArgs(std::ostream &os, const CmdDebugMarkerEndEXTArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdDebugMarkerInsertEXTArgs(std::ostream &os, const CmdDebugMarkerInsertEXTArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "pMarkerInfo";
  os << NewEntry;
  os << "members:";
  os << *args.pMarkerInfo;
  os << CloseBracket << NewEntry;;
}

void CommandRecorder::PrintCmdBeginDebugUtilsLabelEXTArgs(std::ostream &os, const CmdBeginDebugUtilsLabelEXTArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "pLabelInfo";
  os << NewEntry;
  os << "members:";
  os << *args.pLabelInfo;
  os << CloseBracket << NewEntry;;
}

void CommandRecorder::PrintCmdEndDebugUtilsLabelEXTArgs(std::ostream &os, const CmdEndDebugUtilsLabelEXTArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdInsertDebugUtilsLabelEXTArgs(std::ostream &os, const CmdInsertDebugUtilsLabelEXTArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg << NewEntry;
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "pLabelInfo";
  os << NewEntry;
  os << "members:";
  os << *args.pLabelInfo;
  os << CloseBracket << NewEntry;;
}

void CommandRecorder::PrintCmdSetDeviceMaskKHRArgs(std::ostream &os, const CmdSetDeviceMaskKHRArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "deviceMask";
  os << NewEntry;
  os << "value: " << args.deviceMask;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdSetDeviceMaskArgs(std::ostream &os, const CmdSetDeviceMaskArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "deviceMask";
  os << NewEntry;
  os << "value: " << args.deviceMask;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdDispatchBaseKHRArgs(std::ostream &os, const CmdDispatchBaseKHRArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "baseGroupX";
  os << NewEntry;
  os << "value: " << args.baseGroupX;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "baseGroupY";
  os << NewEntry;
  os << "value: " << args.baseGroupY;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "baseGroupZ";
  os << NewEntry;
  os << "value: " << args.baseGroupZ;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "groupCountX";
  os << NewEntry;
  os << "value: " << args.groupCountX;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "groupCountY";
  os << NewEntry;
  os << "value: " << args.groupCountY;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "groupCountZ";
  os << NewEntry;
  os << "value: " << args.groupCountZ;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdDispatchBaseArgs(std::ostream &os, const CmdDispatchBaseArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "baseGroupX";
  os << NewEntry;
  os << "value: " << args.baseGroupX;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "baseGroupY";
  os << NewEntry;
  os << "value: " << args.baseGroupY;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "baseGroupZ";
  os << NewEntry;
  os << "value: " << args.baseGroupZ;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "groupCountX";
  os << NewEntry;
  os << "value: " << args.groupCountX;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "groupCountY";
  os << NewEntry;
  os << "value: " << args.groupCountY;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "groupCountZ";
  os << NewEntry;
  os << "value: " << args.groupCountZ;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdDrawIndirectCountKHRArgs(std::ostream &os, const CmdDrawIndirectCountKHRArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "buffer";
  os << NewEntry;
  os << "value: " << args.buffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "offset";
  os << NewEntry;
  os << "value: " << args.offset;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "countBuffer";
  os << NewEntry;
  os << "value: " << args.countBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "countOffset";
  os << NewEntry;
  os << "value: " << args.countOffset;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "maxDrawCount";
  os << NewEntry;
  os << "value: " << args.maxDrawCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "stride";
  os << NewEntry;
  os << "value: " << args.stride;
  os << CloseBracket;
}

void CommandRecorder::PrintCmdDrawIndexedIndirectCountKHRArgs(std::ostream &os, const CmdDrawIndexedIndirectCountKHRArgs &args, const std::string& indent)
{
  IndentGuard param_indent(os, (int)indent.size() + 1);
  os << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "commandBuffer";
  os << NewEntry;
  os << "value: " << args.commandBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "buffer";
  os << NewEntry;
  os << "value: " << args.buffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "offset";
  os << NewEntry;
  os << "value: " << args.offset;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "countBuffer";
  os << NewEntry;
  os << "value: " << args.countBuffer;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "countOffset";
  os << NewEntry;
  os << "value: " << args.countOffset;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "maxDrawCount";
  os << NewEntry;
  os << "value: " << args.maxDrawCount;
  os << CloseBracket << NewEntry;
  // PrintCommandArg
  os << "- # parameter:";
  os << OpenBracket << NewEntry;
  os << "name: " << "stride";
  os << NewEntry;
  os << "value: " << args.stride;
  os << CloseBracket;
}

BeginCommandBufferArgs *CommandRecorder::RecordBeginCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferBeginInfo const* pBeginInfo)
{
  auto *args = Alloc<BeginCommandBufferArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->pBeginInfo = pBeginInfo; // VkCommandBufferBeginInfo*
  if (pBeginInfo) {
    args->pBeginInfo = CopyArray(pBeginInfo, static_cast<uint64_t>(0U), static_cast<uint64_t>(1U));
  }
  return args;
}

EndCommandBufferArgs *CommandRecorder::RecordEndCommandBuffer(VkCommandBuffer commandBuffer)
{
  auto *args = Alloc<EndCommandBufferArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  return args;
}

ResetCommandBufferArgs *CommandRecorder::RecordResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags)
{
  auto *args = Alloc<ResetCommandBufferArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->flags = flags; // VkCommandBufferResetFlags
  return args;
}

CmdExecuteCommandsArgs *CommandRecorder::RecordCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, VkCommandBuffer const* pCommandBuffers)
{
  auto *args = Alloc<CmdExecuteCommandsArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->commandBufferCount = commandBufferCount; // u32
  args->pCommandBuffers = pCommandBuffers; // VkCommandBuffer*
  if (pCommandBuffers) {
    args->pCommandBuffers = CopyArray(pCommandBuffers, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(commandBufferCount));
  }
  return args;
}

CmdCopyBufferArgs *CommandRecorder::RecordCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, VkBufferCopy const* pRegions)
{
  auto *args = Alloc<CmdCopyBufferArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->srcBuffer = srcBuffer; // VkBuffer
  args->dstBuffer = dstBuffer; // VkBuffer
  args->regionCount = regionCount; // u32
  args->pRegions = pRegions; // VkBufferCopy*
  if (pRegions) {
    args->pRegions = CopyArray(pRegions, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(regionCount));
  }
  return args;
}

CmdCopyImageArgs *CommandRecorder::RecordCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageCopy const* pRegions)
{
  auto *args = Alloc<CmdCopyImageArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->srcImage = srcImage; // VkImage
  args->srcImageLayout = srcImageLayout; // VkImageLayout
  args->dstImage = dstImage; // VkImage
  args->dstImageLayout = dstImageLayout; // VkImageLayout
  args->regionCount = regionCount; // u32
  args->pRegions = pRegions; // VkImageCopy*
  if (pRegions) {
    args->pRegions = CopyArray(pRegions, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(regionCount));
  }
  return args;
}

CmdBlitImageArgs *CommandRecorder::RecordCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageBlit const* pRegions, VkFilter filter)
{
  auto *args = Alloc<CmdBlitImageArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->srcImage = srcImage; // VkImage
  args->srcImageLayout = srcImageLayout; // VkImageLayout
  args->dstImage = dstImage; // VkImage
  args->dstImageLayout = dstImageLayout; // VkImageLayout
  args->regionCount = regionCount; // u32
  args->pRegions = pRegions; // VkImageBlit*
  args->filter = filter; // VkFilter
  if (pRegions) {
    args->pRegions = CopyArray(pRegions, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(regionCount));
  }
  return args;
}

CmdCopyBufferToImageArgs *CommandRecorder::RecordCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkBufferImageCopy const* pRegions)
{
  auto *args = Alloc<CmdCopyBufferToImageArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->srcBuffer = srcBuffer; // VkBuffer
  args->dstImage = dstImage; // VkImage
  args->dstImageLayout = dstImageLayout; // VkImageLayout
  args->regionCount = regionCount; // u32
  args->pRegions = pRegions; // VkBufferImageCopy*
  if (pRegions) {
    args->pRegions = CopyArray(pRegions, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(regionCount));
  }
  return args;
}

CmdCopyImageToBufferArgs *CommandRecorder::RecordCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, VkBufferImageCopy const* pRegions)
{
  auto *args = Alloc<CmdCopyImageToBufferArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->srcImage = srcImage; // VkImage
  args->srcImageLayout = srcImageLayout; // VkImageLayout
  args->dstBuffer = dstBuffer; // VkBuffer
  args->regionCount = regionCount; // u32
  args->pRegions = pRegions; // VkBufferImageCopy*
  if (pRegions) {
    args->pRegions = CopyArray(pRegions, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(regionCount));
  }
  return args;
}

CmdUpdateBufferArgs *CommandRecorder::RecordCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, void const* pData)
{
  auto *args = Alloc<CmdUpdateBufferArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->dstBuffer = dstBuffer; // VkBuffer
  args->dstOffset = dstOffset; // VkDeviceSize
  args->dataSize = dataSize; // VkDeviceSize
  args->pData = pData; // void*
  return args;
}

CmdFillBufferArgs *CommandRecorder::RecordCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data)
{
  auto *args = Alloc<CmdFillBufferArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->dstBuffer = dstBuffer; // VkBuffer
  args->dstOffset = dstOffset; // VkDeviceSize
  args->size = size; // VkDeviceSize
  args->data = data; // u32
  return args;
}

CmdClearColorImageArgs *CommandRecorder::RecordCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue const* pColor, uint32_t rangeCount, VkImageSubresourceRange const* pRanges)
{
  auto *args = Alloc<CmdClearColorImageArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->image = image; // VkImage
  args->imageLayout = imageLayout; // VkImageLayout
  args->pColor = pColor; // VkClearColorValue*
  args->rangeCount = rangeCount; // u32
  args->pRanges = pRanges; // VkImageSubresourceRange*
  if (pColor) {
    args->pColor = CopyArray(pColor, static_cast<uint64_t>(0U), static_cast<uint64_t>(1U));
  }
  if (pRanges) {
    args->pRanges = CopyArray(pRanges, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(rangeCount));
  }
  return args;
}

CmdClearDepthStencilImageArgs *CommandRecorder::RecordCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue const* pDepthStencil, uint32_t rangeCount, VkImageSubresourceRange const* pRanges)
{
  auto *args = Alloc<CmdClearDepthStencilImageArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->image = image; // VkImage
  args->imageLayout = imageLayout; // VkImageLayout
  args->pDepthStencil = pDepthStencil; // VkClearDepthStencilValue*
  args->rangeCount = rangeCount; // u32
  args->pRanges = pRanges; // VkImageSubresourceRange*
  if (pDepthStencil) {
    args->pDepthStencil = CopyArray(pDepthStencil, static_cast<uint64_t>(0U), static_cast<uint64_t>(1U));
  }
  if (pRanges) {
    args->pRanges = CopyArray(pRanges, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(rangeCount));
  }
  return args;
}

CmdClearAttachmentsArgs *CommandRecorder::RecordCmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attachmentCount, VkClearAttachment const* pAttachments, uint32_t rectCount, VkClearRect const* pRects)
{
  auto *args = Alloc<CmdClearAttachmentsArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->attachmentCount = attachmentCount; // u32
  args->pAttachments = pAttachments; // VkClearAttachment*
  args->rectCount = rectCount; // u32
  args->pRects = pRects; // VkClearRect*
  if (pAttachments) {
    args->pAttachments = CopyArray(pAttachments, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(attachmentCount));
  }
  if (pRects) {
    args->pRects = CopyArray(pRects, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(rectCount));
  }
  return args;
}

CmdResolveImageArgs *CommandRecorder::RecordCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageResolve const* pRegions)
{
  auto *args = Alloc<CmdResolveImageArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->srcImage = srcImage; // VkImage
  args->srcImageLayout = srcImageLayout; // VkImageLayout
  args->dstImage = dstImage; // VkImage
  args->dstImageLayout = dstImageLayout; // VkImageLayout
  args->regionCount = regionCount; // u32
  args->pRegions = pRegions; // VkImageResolve*
  if (pRegions) {
    args->pRegions = CopyArray(pRegions, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(regionCount));
  }
  return args;
}

CmdBindDescriptorSetsArgs *CommandRecorder::RecordCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, VkDescriptorSet const* pDescriptorSets, uint32_t dynamicOffsetCount, uint32_t const* pDynamicOffsets)
{
  auto *args = Alloc<CmdBindDescriptorSetsArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->pipelineBindPoint = pipelineBindPoint; // VkPipelineBindPoint
  args->layout = layout; // VkPipelineLayout
  args->firstSet = firstSet; // u32
  args->descriptorSetCount = descriptorSetCount; // u32
  args->pDescriptorSets = pDescriptorSets; // VkDescriptorSet*
  args->dynamicOffsetCount = dynamicOffsetCount; // u32
  args->pDynamicOffsets = pDynamicOffsets; // u32*
  if (pDescriptorSets) {
    args->pDescriptorSets = CopyArray(pDescriptorSets, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(descriptorSetCount));
  }
  if (pDynamicOffsets) {
    args->pDynamicOffsets = CopyArray(pDynamicOffsets, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(dynamicOffsetCount));
  }
  return args;
}

CmdPushConstantsArgs *CommandRecorder::RecordCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, void const* pValues)
{
  auto *args = Alloc<CmdPushConstantsArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->layout = layout; // VkPipelineLayout
  args->stageFlags = stageFlags; // VkShaderStageFlags
  args->offset = offset; // u32
  args->size = size; // u32
  args->pValues = pValues; // void*
  return args;
}

CmdBindIndexBufferArgs *CommandRecorder::RecordCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)
{
  auto *args = Alloc<CmdBindIndexBufferArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->buffer = buffer; // VkBuffer
  args->offset = offset; // VkDeviceSize
  args->indexType = indexType; // VkIndexType
  return args;
}

CmdBindVertexBuffersArgs *CommandRecorder::RecordCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, VkBuffer const* pBuffers, VkDeviceSize const* pOffsets)
{
  auto *args = Alloc<CmdBindVertexBuffersArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->firstBinding = firstBinding; // u32
  args->bindingCount = bindingCount; // u32
  args->pBuffers = pBuffers; // VkBuffer*
  args->pOffsets = pOffsets; // VkDeviceSize*
  if (pBuffers) {
    args->pBuffers = CopyArray(pBuffers, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(bindingCount));
  }
  if (pOffsets) {
    args->pOffsets = CopyArray(pOffsets, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(bindingCount));
  }
  return args;
}

CmdDrawArgs *CommandRecorder::RecordCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)
{
  auto *args = Alloc<CmdDrawArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->vertexCount = vertexCount; // u32
  args->instanceCount = instanceCount; // u32
  args->firstVertex = firstVertex; // u32
  args->firstInstance = firstInstance; // u32
  return args;
}

CmdDrawIndexedArgs *CommandRecorder::RecordCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance)
{
  auto *args = Alloc<CmdDrawIndexedArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->indexCount = indexCount; // u32
  args->instanceCount = instanceCount; // u32
  args->firstIndex = firstIndex; // u32
  args->vertexOffset = vertexOffset; // s32
  args->firstInstance = firstInstance; // u32
  return args;
}

CmdDrawIndirectArgs *CommandRecorder::RecordCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
{
  auto *args = Alloc<CmdDrawIndirectArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->buffer = buffer; // VkBuffer
  args->offset = offset; // VkDeviceSize
  args->drawCount = drawCount; // u32
  args->stride = stride; // u32
  return args;
}

CmdDrawIndexedIndirectArgs *CommandRecorder::RecordCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
{
  auto *args = Alloc<CmdDrawIndexedIndirectArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->buffer = buffer; // VkBuffer
  args->offset = offset; // VkDeviceSize
  args->drawCount = drawCount; // u32
  args->stride = stride; // u32
  return args;
}

CmdDispatchArgs *CommandRecorder::RecordCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  auto *args = Alloc<CmdDispatchArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->groupCountX = groupCountX; // u32
  args->groupCountY = groupCountY; // u32
  args->groupCountZ = groupCountZ; // u32
  return args;
}

CmdDispatchIndirectArgs *CommandRecorder::RecordCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)
{
  auto *args = Alloc<CmdDispatchIndirectArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->buffer = buffer; // VkBuffer
  args->offset = offset; // VkDeviceSize
  return args;
}

CmdBindPipelineArgs *CommandRecorder::RecordCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)
{
  auto *args = Alloc<CmdBindPipelineArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->pipelineBindPoint = pipelineBindPoint; // VkPipelineBindPoint
  args->pipeline = pipeline; // VkPipeline
  return args;
}

CmdSetViewportArgs *CommandRecorder::RecordCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, VkViewport const* pViewports)
{
  auto *args = Alloc<CmdSetViewportArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->firstViewport = firstViewport; // u32
  args->viewportCount = viewportCount; // u32
  args->pViewports = pViewports; // VkViewport*
  if (pViewports) {
    args->pViewports = CopyArray(pViewports, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(viewportCount));
  }
  return args;
}

CmdSetScissorArgs *CommandRecorder::RecordCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, VkRect2D const* pScissors)
{
  auto *args = Alloc<CmdSetScissorArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->firstScissor = firstScissor; // u32
  args->scissorCount = scissorCount; // u32
  args->pScissors = pScissors; // VkRect2D*
  if (pScissors) {
    args->pScissors = CopyArray(pScissors, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(scissorCount));
  }
  return args;
}

CmdSetLineWidthArgs *CommandRecorder::RecordCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth)
{
  auto *args = Alloc<CmdSetLineWidthArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->lineWidth = lineWidth; // f32
  return args;
}

CmdSetDepthBiasArgs *CommandRecorder::RecordCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
{
  auto *args = Alloc<CmdSetDepthBiasArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->depthBiasConstantFactor = depthBiasConstantFactor; // f32
  args->depthBiasClamp = depthBiasClamp; // f32
  args->depthBiasSlopeFactor = depthBiasSlopeFactor; // f32
  return args;
}

CmdSetBlendConstantsArgs *CommandRecorder::RecordCmdSetBlendConstants(VkCommandBuffer commandBuffer, float blendConstants[4])
{
  auto *args = Alloc<CmdSetBlendConstantsArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  for (uint32_t i = 0; i < 4; ++i) { args->blendConstants[i] = blendConstants[i]; } // f32[4]
  return args;
}

CmdSetDepthBoundsArgs *CommandRecorder::RecordCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)
{
  auto *args = Alloc<CmdSetDepthBoundsArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->minDepthBounds = minDepthBounds; // f32
  args->maxDepthBounds = maxDepthBounds; // f32
  return args;
}

CmdSetStencilCompareMaskArgs *CommandRecorder::RecordCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask)
{
  auto *args = Alloc<CmdSetStencilCompareMaskArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->faceMask = faceMask; // VkStencilFaceFlags
  args->compareMask = compareMask; // u32
  return args;
}

CmdSetStencilWriteMaskArgs *CommandRecorder::RecordCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask)
{
  auto *args = Alloc<CmdSetStencilWriteMaskArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->faceMask = faceMask; // VkStencilFaceFlags
  args->writeMask = writeMask; // u32
  return args;
}

CmdSetStencilReferenceArgs *CommandRecorder::RecordCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference)
{
  auto *args = Alloc<CmdSetStencilReferenceArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->faceMask = faceMask; // VkStencilFaceFlags
  args->reference = reference; // u32
  return args;
}

CmdBeginQueryArgs *CommandRecorder::RecordCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags)
{
  auto *args = Alloc<CmdBeginQueryArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->queryPool = queryPool; // VkQueryPool
  args->query = query; // u32
  args->flags = flags; // VkQueryControlFlags
  return args;
}

CmdEndQueryArgs *CommandRecorder::RecordCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query)
{
  auto *args = Alloc<CmdEndQueryArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->queryPool = queryPool; // VkQueryPool
  args->query = query; // u32
  return args;
}

CmdResetQueryPoolArgs *CommandRecorder::RecordCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)
{
  auto *args = Alloc<CmdResetQueryPoolArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->queryPool = queryPool; // VkQueryPool
  args->firstQuery = firstQuery; // u32
  args->queryCount = queryCount; // u32
  return args;
}

CmdWriteTimestampArgs *CommandRecorder::RecordCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query)
{
  auto *args = Alloc<CmdWriteTimestampArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->pipelineStage = pipelineStage; // VkPipelineStageFlagBits
  args->queryPool = queryPool; // VkQueryPool
  args->query = query; // u32
  return args;
}

CmdCopyQueryPoolResultsArgs *CommandRecorder::RecordCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)
{
  auto *args = Alloc<CmdCopyQueryPoolResultsArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->queryPool = queryPool; // VkQueryPool
  args->firstQuery = firstQuery; // u32
  args->queryCount = queryCount; // u32
  args->dstBuffer = dstBuffer; // VkBuffer
  args->dstOffset = dstOffset; // VkDeviceSize
  args->stride = stride; // VkDeviceSize
  args->flags = flags; // VkQueryResultFlags
  return args;
}

CmdBeginRenderPassArgs *CommandRecorder::RecordCmdBeginRenderPass(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo const* pRenderPassBegin, VkSubpassContents contents)
{
  auto *args = Alloc<CmdBeginRenderPassArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->pRenderPassBegin = pRenderPassBegin; // VkRenderPassBeginInfo*
  args->contents = contents; // VkSubpassContents
  if (pRenderPassBegin) {
    args->pRenderPassBegin = CopyArray(pRenderPassBegin, static_cast<uint64_t>(0U), static_cast<uint64_t>(1U));
  }
  return args;
}

CmdNextSubpassArgs *CommandRecorder::RecordCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents)
{
  auto *args = Alloc<CmdNextSubpassArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->contents = contents; // VkSubpassContents
  return args;
}

CmdEndRenderPassArgs *CommandRecorder::RecordCmdEndRenderPass(VkCommandBuffer commandBuffer)
{
  auto *args = Alloc<CmdEndRenderPassArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  return args;
}

CmdSetEventArgs *CommandRecorder::RecordCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
{
  auto *args = Alloc<CmdSetEventArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->event = event; // VkEvent
  args->stageMask = stageMask; // VkPipelineStageFlags
  return args;
}

CmdResetEventArgs *CommandRecorder::RecordCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
{
  auto *args = Alloc<CmdResetEventArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->event = event; // VkEvent
  args->stageMask = stageMask; // VkPipelineStageFlags
  return args;
}

CmdWaitEventsArgs *CommandRecorder::RecordCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, VkEvent const* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, VkMemoryBarrier const* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, VkBufferMemoryBarrier const* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, VkImageMemoryBarrier const* pImageMemoryBarriers)
{
  auto *args = Alloc<CmdWaitEventsArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->eventCount = eventCount; // u32
  args->pEvents = pEvents; // VkEvent*
  args->srcStageMask = srcStageMask; // VkPipelineStageFlags
  args->dstStageMask = dstStageMask; // VkPipelineStageFlags
  args->memoryBarrierCount = memoryBarrierCount; // u32
  args->pMemoryBarriers = pMemoryBarriers; // VkMemoryBarrier*
  args->bufferMemoryBarrierCount = bufferMemoryBarrierCount; // u32
  args->pBufferMemoryBarriers = pBufferMemoryBarriers; // VkBufferMemoryBarrier*
  args->imageMemoryBarrierCount = imageMemoryBarrierCount; // u32
  args->pImageMemoryBarriers = pImageMemoryBarriers; // VkImageMemoryBarrier*
  if (pEvents) {
    args->pEvents = CopyArray(pEvents, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(eventCount));
  }
  if (pMemoryBarriers) {
    args->pMemoryBarriers = CopyArray(pMemoryBarriers, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(memoryBarrierCount));
  }
  if (pBufferMemoryBarriers) {
    args->pBufferMemoryBarriers = CopyArray(pBufferMemoryBarriers, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(bufferMemoryBarrierCount));
  }
  if (pImageMemoryBarriers) {
    args->pImageMemoryBarriers = CopyArray(pImageMemoryBarriers, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(imageMemoryBarrierCount));
  }
  return args;
}

CmdPipelineBarrierArgs *CommandRecorder::RecordCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, VkMemoryBarrier const* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, VkBufferMemoryBarrier const* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, VkImageMemoryBarrier const* pImageMemoryBarriers)
{
  auto *args = Alloc<CmdPipelineBarrierArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->srcStageMask = srcStageMask; // VkPipelineStageFlags
  args->dstStageMask = dstStageMask; // VkPipelineStageFlags
  args->dependencyFlags = dependencyFlags; // VkDependencyFlags
  args->memoryBarrierCount = memoryBarrierCount; // u32
  args->pMemoryBarriers = pMemoryBarriers; // VkMemoryBarrier*
  args->bufferMemoryBarrierCount = bufferMemoryBarrierCount; // u32
  args->pBufferMemoryBarriers = pBufferMemoryBarriers; // VkBufferMemoryBarrier*
  args->imageMemoryBarrierCount = imageMemoryBarrierCount; // u32
  args->pImageMemoryBarriers = pImageMemoryBarriers; // VkImageMemoryBarrier*
  if (pMemoryBarriers) {
    args->pMemoryBarriers = CopyArray(pMemoryBarriers, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(memoryBarrierCount));
  }
  if (pBufferMemoryBarriers) {
    args->pBufferMemoryBarriers = CopyArray(pBufferMemoryBarriers, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(bufferMemoryBarrierCount));
  }
  if (pImageMemoryBarriers) {
    args->pImageMemoryBarriers = CopyArray(pImageMemoryBarriers, (uint64_t)(static_cast<uint32_t>(0U)), (uint64_t)(imageMemoryBarrierCount));
  }
  return args;
}

CmdWriteBufferMarkerAMDArgs *CommandRecorder::RecordCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)
{
  auto *args = Alloc<CmdWriteBufferMarkerAMDArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->pipelineStage = pipelineStage; // VkPipelineStageFlagBits
  args->dstBuffer = dstBuffer; // VkBuffer
  args->dstOffset = dstOffset; // VkDeviceSize
  args->marker = marker; // u32
  return args;
}

CmdDrawIndirectCountAMDArgs *CommandRecorder::RecordCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride)
{
  auto *args = Alloc<CmdDrawIndirectCountAMDArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->buffer = buffer; // VkBuffer
  args->offset = offset; // VkDeviceSize
  args->countBuffer = countBuffer; // VkBuffer
  args->countOffset = countOffset; // VkDeviceSize
  args->maxDrawCount = maxDrawCount; // u32
  args->stride = stride; // u32
  return args;
}

CmdDrawIndexedIndirectCountAMDArgs *CommandRecorder::RecordCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride)
{
  auto *args = Alloc<CmdDrawIndexedIndirectCountAMDArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->buffer = buffer; // VkBuffer
  args->offset = offset; // VkDeviceSize
  args->countBuffer = countBuffer; // VkBuffer
  args->countOffset = countOffset; // VkDeviceSize
  args->maxDrawCount = maxDrawCount; // u32
  args->stride = stride; // u32
  return args;
}

CmdBeginConditionalRenderingEXTArgs *CommandRecorder::RecordCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, VkConditionalRenderingBeginInfoEXT const* pConditinalRenderingBegin)
{
  auto *args = Alloc<CmdBeginConditionalRenderingEXTArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->pConditinalRenderingBegin = pConditinalRenderingBegin; // VkConditionalRenderingBeginInfoEXT*
  return args;
}

CmdEndConditionalRenderingEXTArgs *CommandRecorder::RecordCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer)
{
  auto *args = Alloc<CmdEndConditionalRenderingEXTArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  return args;
}

CmdDebugMarkerBeginEXTArgs *CommandRecorder::RecordCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT const* pMarkerInfo)
{
  auto *args = Alloc<CmdDebugMarkerBeginEXTArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->pMarkerInfo = pMarkerInfo; // VkDebugMarkerMarkerInfoEXT*
  if (pMarkerInfo) {
    args->pMarkerInfo = CopyArray(pMarkerInfo, static_cast<uint64_t>(0U), static_cast<uint64_t>(1U));
  }
  return args;
}

CmdDebugMarkerEndEXTArgs *CommandRecorder::RecordCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer)
{
  auto *args = Alloc<CmdDebugMarkerEndEXTArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  return args;
}

CmdDebugMarkerInsertEXTArgs *CommandRecorder::RecordCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT const* pMarkerInfo)
{
  auto *args = Alloc<CmdDebugMarkerInsertEXTArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->pMarkerInfo = pMarkerInfo; // VkDebugMarkerMarkerInfoEXT*
  if (pMarkerInfo) {
    args->pMarkerInfo = CopyArray(pMarkerInfo, static_cast<uint64_t>(0U), static_cast<uint64_t>(1U));
  }
  return args;
}

CmdBeginDebugUtilsLabelEXTArgs *CommandRecorder::RecordCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT const* pLabelInfo)
{
  auto *args = Alloc<CmdBeginDebugUtilsLabelEXTArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->pLabelInfo = pLabelInfo; // VkDebugUtilsLabelEXT*
  if (pLabelInfo) {
    args->pLabelInfo = CopyArray(pLabelInfo, static_cast<uint64_t>(0U), static_cast<uint64_t>(1U));
  }
  return args;
}

CmdEndDebugUtilsLabelEXTArgs *CommandRecorder::RecordCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer)
{
  auto *args = Alloc<CmdEndDebugUtilsLabelEXTArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  return args;
}

CmdInsertDebugUtilsLabelEXTArgs *CommandRecorder::RecordCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT const* pLabelInfo)
{
  auto *args = Alloc<CmdInsertDebugUtilsLabelEXTArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->pLabelInfo = pLabelInfo; // VkDebugUtilsLabelEXT*
  if (pLabelInfo) {
    args->pLabelInfo = CopyArray(pLabelInfo, static_cast<uint64_t>(0U), static_cast<uint64_t>(1U));
  }
  return args;
}

CmdSetDeviceMaskKHRArgs *CommandRecorder::RecordCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint32_t deviceMask)
{
  auto *args = Alloc<CmdSetDeviceMaskKHRArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->deviceMask = deviceMask; // u32
  return args;
}

CmdSetDeviceMaskArgs *CommandRecorder::RecordCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMask)
{
  auto *args = Alloc<CmdSetDeviceMaskArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->deviceMask = deviceMask; // u32
  return args;
}

CmdDispatchBaseKHRArgs *CommandRecorder::RecordCmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  auto *args = Alloc<CmdDispatchBaseKHRArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->baseGroupX = baseGroupX; // u32
  args->baseGroupY = baseGroupY; // u32
  args->baseGroupZ = baseGroupZ; // u32
  args->groupCountX = groupCountX; // u32
  args->groupCountY = groupCountY; // u32
  args->groupCountZ = groupCountZ; // u32
  return args;
}

CmdDispatchBaseArgs *CommandRecorder::RecordCmdDispatchBase(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  auto *args = Alloc<CmdDispatchBaseArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->baseGroupX = baseGroupX; // u32
  args->baseGroupY = baseGroupY; // u32
  args->baseGroupZ = baseGroupZ; // u32
  args->groupCountX = groupCountX; // u32
  args->groupCountY = groupCountY; // u32
  args->groupCountZ = groupCountZ; // u32
  return args;
}

CmdDrawIndirectCountKHRArgs *CommandRecorder::RecordCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride)
{
  auto *args = Alloc<CmdDrawIndirectCountKHRArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->buffer = buffer; // VkBuffer
  args->offset = offset; // VkDeviceSize
  args->countBuffer = countBuffer; // VkBuffer
  args->countOffset = countOffset; // VkDeviceSize
  args->maxDrawCount = maxDrawCount; // u32
  args->stride = stride; // u32
  return args;
}

CmdDrawIndexedIndirectCountKHRArgs *CommandRecorder::RecordCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride)
{
  auto *args = Alloc<CmdDrawIndexedIndirectCountKHRArgs>();
  args->commandBuffer = commandBuffer; // VkCommandBuffer
  args->buffer = buffer; // VkBuffer
  args->offset = offset; // VkDeviceSize
  args->countBuffer = countBuffer; // VkBuffer
  args->countOffset = countOffset; // VkDeviceSize
  args->maxDrawCount = maxDrawCount; // u32
  args->stride = stride; // u32
  return args;
}
