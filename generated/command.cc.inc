/*
 * Copyright (C) 2015 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * THIS FILE WAS GENERATED BY apic. DO NOT EDIT.
 */

// clang-format off

void CommandBuffer::PreCmdExecuteCommands(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t commandBufferCount, VkCommandBuffer const* pCommandBuffers)
{
  tracker_.TrackPreCmdExecuteCommands(wrappedCommandBuffer, commandBufferCount, pCommandBuffers);
  if (true) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdExecuteCommands(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t commandBufferCount, VkCommandBuffer const* pCommandBuffers)
{
  tracker_.TrackPostCmdExecuteCommands(wrappedCommandBuffer, commandBufferCount, pCommandBuffers);
  if (true) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdCopyBuffer(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, VkBufferCopy const* pRegions)
{
  tracker_.TrackPreCmdCopyBuffer(wrappedCommandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
  if (true) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdCopyBuffer(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, VkBufferCopy const* pRegions)
{
  tracker_.TrackPostCmdCopyBuffer(wrappedCommandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
  if (true) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdCopyImage(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageCopy const* pRegions)
{
  tracker_.TrackPreCmdCopyImage(wrappedCommandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
  if (true) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdCopyImage(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageCopy const* pRegions)
{
  tracker_.TrackPostCmdCopyImage(wrappedCommandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
  if (true) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdBlitImage(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageBlit const* pRegions, VkFilter filter)
{
  tracker_.TrackPreCmdBlitImage(wrappedCommandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdBlitImage(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageBlit const* pRegions, VkFilter filter)
{
  tracker_.TrackPostCmdBlitImage(wrappedCommandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdCopyBufferToImage(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkBufferImageCopy const* pRegions)
{
  tracker_.TrackPreCmdCopyBufferToImage(wrappedCommandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
  if (true) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdCopyBufferToImage(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkBufferImageCopy const* pRegions)
{
  tracker_.TrackPostCmdCopyBufferToImage(wrappedCommandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
  if (true) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdCopyImageToBuffer(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, VkBufferImageCopy const* pRegions)
{
  tracker_.TrackPreCmdCopyImageToBuffer(wrappedCommandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
  if (true) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdCopyImageToBuffer(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, VkBufferImageCopy const* pRegions)
{
  tracker_.TrackPostCmdCopyImageToBuffer(wrappedCommandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
  if (true) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdUpdateBuffer(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, void const* pData)
{
  tracker_.TrackPreCmdUpdateBuffer(wrappedCommandBuffer, dstBuffer, dstOffset, dataSize, pData);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdUpdateBuffer(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, void const* pData)
{
  tracker_.TrackPostCmdUpdateBuffer(wrappedCommandBuffer, dstBuffer, dstOffset, dataSize, pData);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdFillBuffer(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data)
{
  tracker_.TrackPreCmdFillBuffer(wrappedCommandBuffer, dstBuffer, dstOffset, size, data);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdFillBuffer(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data)
{
  tracker_.TrackPostCmdFillBuffer(wrappedCommandBuffer, dstBuffer, dstOffset, size, data);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdClearColorImage(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue const* pColor, uint32_t rangeCount, VkImageSubresourceRange const* pRanges)
{
  tracker_.TrackPreCmdClearColorImage(wrappedCommandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdClearColorImage(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue const* pColor, uint32_t rangeCount, VkImageSubresourceRange const* pRanges)
{
  tracker_.TrackPostCmdClearColorImage(wrappedCommandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdClearDepthStencilImage(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue const* pDepthStencil, uint32_t rangeCount, VkImageSubresourceRange const* pRanges)
{
  tracker_.TrackPreCmdClearDepthStencilImage(wrappedCommandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdClearDepthStencilImage(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue const* pDepthStencil, uint32_t rangeCount, VkImageSubresourceRange const* pRanges)
{
  tracker_.TrackPostCmdClearDepthStencilImage(wrappedCommandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdClearAttachments(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t attachmentCount, VkClearAttachment const* pAttachments, uint32_t rectCount, VkClearRect const* pRects)
{
  tracker_.TrackPreCmdClearAttachments(wrappedCommandBuffer, attachmentCount, pAttachments, rectCount, pRects);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdClearAttachments(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t attachmentCount, VkClearAttachment const* pAttachments, uint32_t rectCount, VkClearRect const* pRects)
{
  tracker_.TrackPostCmdClearAttachments(wrappedCommandBuffer, attachmentCount, pAttachments, rectCount, pRects);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdResolveImage(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageResolve const* pRegions)
{
  tracker_.TrackPreCmdResolveImage(wrappedCommandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdResolveImage(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, VkImageResolve const* pRegions)
{
  tracker_.TrackPostCmdResolveImage(wrappedCommandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdBindDescriptorSets(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, VkDescriptorSet const* pDescriptorSets, uint32_t dynamicOffsetCount, uint32_t const* pDynamicOffsets)
{
  tracker_.TrackPreCmdBindDescriptorSets(wrappedCommandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdBindDescriptorSets(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, VkDescriptorSet const* pDescriptorSets, uint32_t dynamicOffsetCount, uint32_t const* pDynamicOffsets)
{
  tracker_.TrackPostCmdBindDescriptorSets(wrappedCommandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdPushConstants(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, void const* pValues)
{
  tracker_.TrackPreCmdPushConstants(wrappedCommandBuffer, layout, stageFlags, offset, size, pValues);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdPushConstants(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, void const* pValues)
{
  tracker_.TrackPostCmdPushConstants(wrappedCommandBuffer, layout, stageFlags, offset, size, pValues);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdBindIndexBuffer(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)
{
  tracker_.TrackPreCmdBindIndexBuffer(wrappedCommandBuffer, buffer, offset, indexType);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdBindIndexBuffer(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)
{
  tracker_.TrackPostCmdBindIndexBuffer(wrappedCommandBuffer, buffer, offset, indexType);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdBindVertexBuffers(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, VkBuffer const* pBuffers, VkDeviceSize const* pOffsets)
{
  tracker_.TrackPreCmdBindVertexBuffers(wrappedCommandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdBindVertexBuffers(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, VkBuffer const* pBuffers, VkDeviceSize const* pOffsets)
{
  tracker_.TrackPostCmdBindVertexBuffers(wrappedCommandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDraw(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)
{
  tracker_.TrackPreCmdDraw(wrappedCommandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
  if (true) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDraw(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance)
{
  tracker_.TrackPostCmdDraw(wrappedCommandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
  if (true) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDrawIndexed(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance)
{
  tracker_.TrackPreCmdDrawIndexed(wrappedCommandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
  if (true) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDrawIndexed(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance)
{
  tracker_.TrackPostCmdDrawIndexed(wrappedCommandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
  if (true) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDrawIndirect(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
{
  tracker_.TrackPreCmdDrawIndirect(wrappedCommandBuffer, buffer, offset, drawCount, stride);
  if (true) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDrawIndirect(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
{
  tracker_.TrackPostCmdDrawIndirect(wrappedCommandBuffer, buffer, offset, drawCount, stride);
  if (true) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDrawIndexedIndirect(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
{
  tracker_.TrackPreCmdDrawIndexedIndirect(wrappedCommandBuffer, buffer, offset, drawCount, stride);
  if (true) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDrawIndexedIndirect(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride)
{
  tracker_.TrackPostCmdDrawIndexedIndirect(wrappedCommandBuffer, buffer, offset, drawCount, stride);
  if (true) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDispatch(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  tracker_.TrackPreCmdDispatch(wrappedCommandBuffer, groupCountX, groupCountY, groupCountZ);
  if (true) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDispatch(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  tracker_.TrackPostCmdDispatch(wrappedCommandBuffer, groupCountX, groupCountY, groupCountZ);
  if (true) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDispatchIndirect(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)
{
  tracker_.TrackPreCmdDispatchIndirect(wrappedCommandBuffer, buffer, offset);
  if (true) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDispatchIndirect(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)
{
  tracker_.TrackPostCmdDispatchIndirect(wrappedCommandBuffer, buffer, offset);
  if (true) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdBindPipeline(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)
{
  tracker_.TrackPreCmdBindPipeline(wrappedCommandBuffer, pipelineBindPoint, pipeline);
  if (true) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdBindPipeline(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)
{
  tracker_.TrackPostCmdBindPipeline(wrappedCommandBuffer, pipelineBindPoint, pipeline);
  if (true) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetViewport(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, VkViewport const* pViewports)
{
  tracker_.TrackPreCmdSetViewport(wrappedCommandBuffer, firstViewport, viewportCount, pViewports);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetViewport(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, VkViewport const* pViewports)
{
  tracker_.TrackPostCmdSetViewport(wrappedCommandBuffer, firstViewport, viewportCount, pViewports);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetScissor(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, VkRect2D const* pScissors)
{
  tracker_.TrackPreCmdSetScissor(wrappedCommandBuffer, firstScissor, scissorCount, pScissors);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetScissor(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, VkRect2D const* pScissors)
{
  tracker_.TrackPostCmdSetScissor(wrappedCommandBuffer, firstScissor, scissorCount, pScissors);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetLineWidth(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, float lineWidth)
{
  tracker_.TrackPreCmdSetLineWidth(wrappedCommandBuffer, lineWidth);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetLineWidth(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, float lineWidth)
{
  tracker_.TrackPostCmdSetLineWidth(wrappedCommandBuffer, lineWidth);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetDepthBias(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
{
  tracker_.TrackPreCmdSetDepthBias(wrappedCommandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetDepthBias(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
{
  tracker_.TrackPostCmdSetDepthBias(wrappedCommandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetBlendConstants(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, float blendConstants[4])
{
  tracker_.TrackPreCmdSetBlendConstants(wrappedCommandBuffer, blendConstants);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetBlendConstants(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, float blendConstants[4])
{
  tracker_.TrackPostCmdSetBlendConstants(wrappedCommandBuffer, blendConstants);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetDepthBounds(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)
{
  tracker_.TrackPreCmdSetDepthBounds(wrappedCommandBuffer, minDepthBounds, maxDepthBounds);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetDepthBounds(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)
{
  tracker_.TrackPostCmdSetDepthBounds(wrappedCommandBuffer, minDepthBounds, maxDepthBounds);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetStencilCompareMask(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask)
{
  tracker_.TrackPreCmdSetStencilCompareMask(wrappedCommandBuffer, faceMask, compareMask);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetStencilCompareMask(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask)
{
  tracker_.TrackPostCmdSetStencilCompareMask(wrappedCommandBuffer, faceMask, compareMask);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetStencilWriteMask(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask)
{
  tracker_.TrackPreCmdSetStencilWriteMask(wrappedCommandBuffer, faceMask, writeMask);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetStencilWriteMask(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask)
{
  tracker_.TrackPostCmdSetStencilWriteMask(wrappedCommandBuffer, faceMask, writeMask);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetStencilReference(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference)
{
  tracker_.TrackPreCmdSetStencilReference(wrappedCommandBuffer, faceMask, reference);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetStencilReference(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference)
{
  tracker_.TrackPostCmdSetStencilReference(wrappedCommandBuffer, faceMask, reference);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdBeginQuery(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags)
{
  tracker_.TrackPreCmdBeginQuery(wrappedCommandBuffer, queryPool, query, flags);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdBeginQuery(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags)
{
  tracker_.TrackPostCmdBeginQuery(wrappedCommandBuffer, queryPool, query, flags);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdEndQuery(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query)
{
  tracker_.TrackPreCmdEndQuery(wrappedCommandBuffer, queryPool, query);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdEndQuery(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query)
{
  tracker_.TrackPostCmdEndQuery(wrappedCommandBuffer, queryPool, query);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdResetQueryPool(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)
{
  tracker_.TrackPreCmdResetQueryPool(wrappedCommandBuffer, queryPool, firstQuery, queryCount);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdResetQueryPool(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount)
{
  tracker_.TrackPostCmdResetQueryPool(wrappedCommandBuffer, queryPool, firstQuery, queryCount);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdWriteTimestamp(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query)
{
  tracker_.TrackPreCmdWriteTimestamp(wrappedCommandBuffer, pipelineStage, queryPool, query);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdWriteTimestamp(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query)
{
  tracker_.TrackPostCmdWriteTimestamp(wrappedCommandBuffer, pipelineStage, queryPool, query);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdCopyQueryPoolResults(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)
{
  tracker_.TrackPreCmdCopyQueryPoolResults(wrappedCommandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdCopyQueryPoolResults(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)
{
  tracker_.TrackPostCmdCopyQueryPoolResults(wrappedCommandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdBeginRenderPass(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkRenderPassBeginInfo const* pRenderPassBegin, VkSubpassContents contents)
{
  tracker_.TrackPreCmdBeginRenderPass(wrappedCommandBuffer, pRenderPassBegin, contents);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdBeginRenderPass(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkRenderPassBeginInfo const* pRenderPassBegin, VkSubpassContents contents)
{
  tracker_.TrackPostCmdBeginRenderPass(wrappedCommandBuffer, pRenderPassBegin, contents);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdNextSubpass(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkSubpassContents contents)
{
  tracker_.TrackPreCmdNextSubpass(wrappedCommandBuffer, contents);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdNextSubpass(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkSubpassContents contents)
{
  tracker_.TrackPostCmdNextSubpass(wrappedCommandBuffer, contents);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdEndRenderPass(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer)
{
  tracker_.TrackPreCmdEndRenderPass(wrappedCommandBuffer);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdEndRenderPass(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer)
{
  tracker_.TrackPostCmdEndRenderPass(wrappedCommandBuffer);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetEvent(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
{
  tracker_.TrackPreCmdSetEvent(wrappedCommandBuffer, event, stageMask);
  if (true) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetEvent(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
{
  tracker_.TrackPostCmdSetEvent(wrappedCommandBuffer, event, stageMask);
  if (true) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdResetEvent(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
{
  tracker_.TrackPreCmdResetEvent(wrappedCommandBuffer, event, stageMask);
  if (true) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdResetEvent(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask)
{
  tracker_.TrackPostCmdResetEvent(wrappedCommandBuffer, event, stageMask);
  if (true) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdWaitEvents(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t eventCount, VkEvent const* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, VkMemoryBarrier const* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, VkBufferMemoryBarrier const* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, VkImageMemoryBarrier const* pImageMemoryBarriers)
{
  tracker_.TrackPreCmdWaitEvents(wrappedCommandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
  if (true) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdWaitEvents(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t eventCount, VkEvent const* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, VkMemoryBarrier const* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, VkBufferMemoryBarrier const* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, VkImageMemoryBarrier const* pImageMemoryBarriers)
{
  tracker_.TrackPostCmdWaitEvents(wrappedCommandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
  if (true) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdPipelineBarrier(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, VkMemoryBarrier const* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, VkBufferMemoryBarrier const* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, VkImageMemoryBarrier const* pImageMemoryBarriers)
{
  tracker_.TrackPreCmdPipelineBarrier(wrappedCommandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdPipelineBarrier(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, VkMemoryBarrier const* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, VkBufferMemoryBarrier const* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, VkImageMemoryBarrier const* pImageMemoryBarriers)
{
  tracker_.TrackPostCmdPipelineBarrier(wrappedCommandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdWriteBufferMarkerAMD(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)
{
  tracker_.TrackPreCmdWriteBufferMarkerAMD(wrappedCommandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdWriteBufferMarkerAMD(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker)
{
  tracker_.TrackPostCmdWriteBufferMarkerAMD(wrappedCommandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDrawIndirectCountAMD(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride)
{
  tracker_.TrackPreCmdDrawIndirectCountAMD(wrappedCommandBuffer, buffer, offset, countBuffer, countOffset, maxDrawCount, stride);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDrawIndirectCountAMD(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride)
{
  tracker_.TrackPostCmdDrawIndirectCountAMD(wrappedCommandBuffer, buffer, offset, countBuffer, countOffset, maxDrawCount, stride);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDrawIndexedIndirectCountAMD(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride)
{
  tracker_.TrackPreCmdDrawIndexedIndirectCountAMD(wrappedCommandBuffer, buffer, offset, countBuffer, countOffset, maxDrawCount, stride);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDrawIndexedIndirectCountAMD(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride)
{
  tracker_.TrackPostCmdDrawIndexedIndirectCountAMD(wrappedCommandBuffer, buffer, offset, countBuffer, countOffset, maxDrawCount, stride);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdBeginConditionalRenderingEXT(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkConditionalRenderingBeginInfoEXT const* pConditinalRenderingBegin)
{
  tracker_.TrackPreCmdBeginConditionalRenderingEXT(wrappedCommandBuffer, pConditinalRenderingBegin);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdBeginConditionalRenderingEXT(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkConditionalRenderingBeginInfoEXT const* pConditinalRenderingBegin)
{
  tracker_.TrackPostCmdBeginConditionalRenderingEXT(wrappedCommandBuffer, pConditinalRenderingBegin);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdEndConditionalRenderingEXT(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer)
{
  tracker_.TrackPreCmdEndConditionalRenderingEXT(wrappedCommandBuffer);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdEndConditionalRenderingEXT(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer)
{
  tracker_.TrackPostCmdEndConditionalRenderingEXT(wrappedCommandBuffer);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDebugMarkerBeginEXT(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT const* pMarkerInfo)
{
  tracker_.TrackPreCmdDebugMarkerBeginEXT(wrappedCommandBuffer, pMarkerInfo);
  if (true) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDebugMarkerBeginEXT(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT const* pMarkerInfo)
{
  tracker_.TrackPostCmdDebugMarkerBeginEXT(wrappedCommandBuffer, pMarkerInfo);
  if (true) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDebugMarkerEndEXT(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer)
{
  tracker_.TrackPreCmdDebugMarkerEndEXT(wrappedCommandBuffer);
  if (true) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDebugMarkerEndEXT(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer)
{
  tracker_.TrackPostCmdDebugMarkerEndEXT(wrappedCommandBuffer);
  if (true) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDebugMarkerInsertEXT(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT const* pMarkerInfo)
{
  tracker_.TrackPreCmdDebugMarkerInsertEXT(wrappedCommandBuffer, pMarkerInfo);
  if (true) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDebugMarkerInsertEXT(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT const* pMarkerInfo)
{
  tracker_.TrackPostCmdDebugMarkerInsertEXT(wrappedCommandBuffer, pMarkerInfo);
  if (true) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdBeginDebugUtilsLabelEXT(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT const* pLabelInfo)
{
  tracker_.TrackPreCmdBeginDebugUtilsLabelEXT(wrappedCommandBuffer, pLabelInfo);
  if (true) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdBeginDebugUtilsLabelEXT(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT const* pLabelInfo)
{
  tracker_.TrackPostCmdBeginDebugUtilsLabelEXT(wrappedCommandBuffer, pLabelInfo);
  if (true) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdEndDebugUtilsLabelEXT(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer)
{
  tracker_.TrackPreCmdEndDebugUtilsLabelEXT(wrappedCommandBuffer);
  if (true) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdEndDebugUtilsLabelEXT(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer)
{
  tracker_.TrackPostCmdEndDebugUtilsLabelEXT(wrappedCommandBuffer);
  if (true) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdInsertDebugUtilsLabelEXT(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT const* pLabelInfo)
{
  tracker_.TrackPreCmdInsertDebugUtilsLabelEXT(wrappedCommandBuffer, pLabelInfo);
  if (true) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdInsertDebugUtilsLabelEXT(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT const* pLabelInfo)
{
  tracker_.TrackPostCmdInsertDebugUtilsLabelEXT(wrappedCommandBuffer, pLabelInfo);
  if (true) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetDeviceMaskKHR(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t deviceMask)
{
  tracker_.TrackPreCmdSetDeviceMaskKHR(wrappedCommandBuffer, deviceMask);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetDeviceMaskKHR(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t deviceMask)
{
  tracker_.TrackPostCmdSetDeviceMaskKHR(wrappedCommandBuffer, deviceMask);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdSetDeviceMask(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t deviceMask)
{
  tracker_.TrackPreCmdSetDeviceMask(wrappedCommandBuffer, deviceMask);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdSetDeviceMask(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t deviceMask)
{
  tracker_.TrackPostCmdSetDeviceMask(wrappedCommandBuffer, deviceMask);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDispatchBaseKHR(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  tracker_.TrackPreCmdDispatchBaseKHR(wrappedCommandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDispatchBaseKHR(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  tracker_.TrackPostCmdDispatchBaseKHR(wrappedCommandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDispatchBase(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  tracker_.TrackPreCmdDispatchBase(wrappedCommandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDispatchBase(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ)
{
  tracker_.TrackPostCmdDispatchBase(wrappedCommandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDrawIndirectCountKHR(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride)
{
  tracker_.TrackPreCmdDrawIndirectCountKHR(wrappedCommandBuffer, buffer, offset, countBuffer, countOffset, maxDrawCount, stride);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDrawIndirectCountKHR(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride)
{
  tracker_.TrackPostCmdDrawIndirectCountKHR(wrappedCommandBuffer, buffer, offset, countBuffer, countOffset, maxDrawCount, stride);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PreCmdDrawIndexedIndirectCountKHR(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride)
{
  tracker_.TrackPreCmdDrawIndexedIndirectCountKHR(wrappedCommandBuffer, buffer, offset, countBuffer, countOffset, maxDrawCount, stride);
  if (instrument_all_commands_) {
    WriteBeginCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}

void CommandBuffer::PostCmdDrawIndexedIndirectCountKHR(VkCommandBuffer wrappedCommandBuffer, VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countOffset, uint32_t maxDrawCount, uint32_t stride)
{
  tracker_.TrackPostCmdDrawIndexedIndirectCountKHR(wrappedCommandBuffer, buffer, offset, countBuffer, countOffset, maxDrawCount, stride);
  if (instrument_all_commands_) {
    WriteEndCommandExecutionMarker(tracker_.GetCommands().back().id);
  }
}
// clang-format on